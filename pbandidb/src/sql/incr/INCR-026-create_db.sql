/*******************************************************************************
* Copyright Regione Piemonte - 2024
* SPDX-License-Identifier: EUPL-1.2
******************************************************************************/

--PBANDI_R_FOLDER_FILE_DOC_INDEX
DROP TABLE PBANDI_R_FOLDER_FILE_DOC_INDEX;

--
CREATE TABLE PBANDI_T_FILE
( 
  ID_FILE             INTEGER,
  ID_FOLDER           INTEGER              NOT NULL,
  ID_DOCUMENTO_INDEX  NUMBER(8)            NOT NULL,
  NOME_FILE           VARCHAR2(255)        NOT NULL,
  SIZE_FILE           NUMBER,
  ID_UTENTE_INS       NUMBER(8)            NOT NULL,
  DT_INSERIMENTO      DATE                 NOT NULL,
  ID_UTENTE_AGG       NUMBER(8),
  DT_AGGIORNAMENTO    DATE
)
TABLESPACE PBANDI_SMALL_TBL;

COMMENT ON TABLE PBANDI_T_FILE IS 'Tabella di organizzazione dei file relativi ai documenti (DEMATERIALIZZAZIONE)';

COMMENT ON COLUMN PBANDI_T_FILE.ID_FOLDER IS 'Chiave esterna su PBANDI_T_FOLDER';
COMMENT ON COLUMN PBANDI_T_FILE.ID_DOCUMENTO_INDEX IS 'Chiave esterna su  PBANDI_T_DOCUMENTO_INDEX';
COMMENT ON COLUMN PBANDI_T_FILE.NOME_FILE IS 'Nome del file univoco nella cartella';
COMMENT ON COLUMN PBANDI_T_FILE.SIZE_FILE IS 'Size del file per poter controllare lo spazio destinato all''utente';

ALTER TABLE PBANDI_T_FILE ADD (
  CONSTRAINT PK_PBANDI_T_FILE
  PRIMARY KEY
  (ID_FILE)
  USING INDEX TABLESPACE PBANDI_SMALL_IDX,
  CONSTRAINT AK1_PBANDI_R_FOLD_FILE_DOC_IND
  UNIQUE (ID_FOLDER, NOME_FILE)
  USING INDEX TABLESPACE PBANDI_SMALL_IDX);

ALTER TABLE PBANDI_T_FILE ADD (
  CONSTRAINT FK_PBANDI_T_DOCUMENTO_INDEX_04 
  FOREIGN KEY (ID_DOCUMENTO_INDEX) 
  REFERENCES PBANDI_T_DOCUMENTO_INDEX (ID_DOCUMENTO_INDEX),
  CONSTRAINT FK_PBANDI_T_FOLDER_02 
  FOREIGN KEY (ID_FOLDER) 
  REFERENCES PBANDI_T_FOLDER (ID_FOLDER),
  CONSTRAINT FK_PBANDI_T_UTENTE_257 
  FOREIGN KEY (ID_UTENTE_INS) 
  REFERENCES PBANDI_T_UTENTE (ID_UTENTE),
  CONSTRAINT FK_PBANDI_T_UTENTE_263
  FOREIGN KEY (ID_UTENTE_AGG) 
  REFERENCES PBANDI_T_UTENTE (ID_UTENTE));

CREATE SEQUENCE SEQ_PBANDI_T_FILE
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;
  
--
CREATE TABLE PBANDI_T_FILE_ENTITA
(
  ID_FILE_ENTITA      INTEGER,
  ID_FILE             INTEGER   NOT NULL,
  ID_ENTITA           NUMBER(3) NOT NULL,
  ID_TARGET           NUMBER(8) NOT NULL,
  ID_PROGETTO         NUMBER(8)
)
TABLESPACE PBANDI_SMALL_TBL;

COMMENT ON TABLE  PBANDI_T_FILE_ENTITA IS 'Tabella di associazione file con le entità del business';

COMMENT ON COLUMN PBANDI_T_FILE_ENTITA.ID_FILE IS 'Chiave esterna su PBANDI_T_FILE';

COMMENT ON COLUMN PBANDI_T_FILE_ENTITA.ID_ENTITA IS 'Chiave esterna su  PBANDI_T_ENTITA';

COMMENT ON COLUMN PBANDI_T_FILE_ENTITA.ID_TARGET IS 'Identificativo del record nell''ambito dell''Entità';

COMMENT ON COLUMN PBANDI_T_FILE_ENTITA.ID_PROGETTO IS 'Chiave esterna su  PBANDI_T_PROGETTO';


ALTER TABLE PBANDI_T_FILE_ENTITA ADD (
  CONSTRAINT PK_PBANDI_T_FILE_ENTITA
  PRIMARY KEY
  (ID_FILE_ENTITA)
  USING INDEX TABLESPACE PBANDI_SMALL_IDX);

ALTER TABLE PBANDI_T_FILE_ENTITA ADD (
  CONSTRAINT AK1_PBANDI_T_FILE_ENTITA
  UNIQUE
  (ID_FILE,ID_ENTITA,ID_TARGET,ID_PROGETTO)
  USING INDEX TABLESPACE PBANDI_SMALL_IDX);

ALTER TABLE PBANDI_T_FILE_ENTITA ADD (
  CONSTRAINT FK_PBANDI_T_FILE_01 
  FOREIGN KEY (ID_FILE) 
  REFERENCES PBANDI_T_FILE (ID_FILE),
  CONSTRAINT FK_PBANDI_C_ENTITA_05 
  FOREIGN KEY (ID_ENTITA) 
  REFERENCES PBANDI_C_ENTITA (ID_ENTITA),
  CONSTRAINT FK_PBANDI_T_PROGETTO_37 
  FOREIGN KEY (ID_PROGETTO) 
  REFERENCES PBANDI_T_PROGETTO (ID_PROGETTO));
  
CREATE INDEX IE1_PBANDI_T_FILE_ENTITA ON PBANDI_T_FILE_ENTITA (ID_ENTITA,ID_TARGET)  TABLESPACE PBANDI_SMALL_IDX;
CREATE INDEX IE2_PBANDI_T_FILE_ENTITA ON PBANDI_T_FILE_ENTITA (ID_PROGETTO)  TABLESPACE PBANDI_SMALL_IDX;

CREATE SEQUENCE SEQ_PBANDI_T_FILE_ENTITA
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;
  
--PBANDI_V_SITUAZIONE_DOC
CREATE OR REPLACE FORCE VIEW PBANDI_V_SITUAZIONE_DOC
(
   ID_DOCUMENTO_DI_SPESA,
   ID_PROGETTO,
   ID_STATO_DOCUMENTO_SPESA,
   DESC_STATO_DOCUMENTO_SPESA,
   TIPO_INVIO,
   FLAG_ELETTRONICO,
   ID_DICH_SPESA_APERTA,
   ID_PAGAMENTO,
   ID_DOCUMENTO_INDEX,
   NUM_PROTOCOLLO,
   NOME_FILE,
   ALLEGATO_DOCUMENTO,
   ALLEGATO_PAGAMENTO,
   DT_INSERIMENTO_FOLDER,
   DT_AGGIORNAMENTO_INDEX,
   BR42,
   CHECK_COMPLETO
)
AS
   WITH dich_spesa
        AS (SELECT b.ID_DICHIARAZIONE_SPESA,
                   a.ID_DOCUMENTO_DI_SPESA,
                   b.ID_PROGETTO
              FROM PBANDI_T_DICHIARAZIONE_SPESA b, PBANDI_S_DICH_DOC_SPESA a
             WHERE b.ID_DICHIARAZIONE_SPESA = a.ID_DICHIARAZIONE_SPESA
                   AND b.DT_CHIUSURA_VALIDAZIONE IS NULL),
        dich_spesa_1
        AS (SELECT b.ID_DICHIARAZIONE_SPESA,
                   a.ID_DOCUMENTO_DI_SPESA,
                   b.ID_PROGETTO
              FROM PBANDI_T_DICHIARAZIONE_SPESA b, PBANDI_S_DICH_DOC_SPESA a
             WHERE b.ID_DICHIARAZIONE_SPESA = a.ID_DICHIARAZIONE_SPESA
                   AND b.DT_CHIUSURA_VALIDAZIONE IS NULL),
        allegati_doc_spesa
        AS (SELECT                                            /*+First_rows */
                  a.ID_DOCUMENTO_INDEX,
                   d.id_target,
                   NULL ID_PAGAMENTO,
                   NUM_PROTOCOLLO,
                   a.NOME_FILE,
                   NOME_ENTITA,
                   C.DT_INSERIMENTO DT_INSERIMENTO_FOLDER,
                   A.DT_AGGIORNAMENTO_INDEX
              FROM PBANDI_T_DOCUMENTO_INDEX a,
                   PBANDI_C_ENTITA b,
                   PBANDI_T_FILE c,
                   PBANDI_T_FILE_ENTITA d
             WHERE     d.id_entita = b.id_entita
                   AND nome_entita = 'PBANDI_T_DOCUMENTO_DI_SPESA'
                   AND c.ID_DOCUMENTO_INDEX = a.ID_DOCUMENTO_INDEX
                   AND d.id_file = c.id_file),
        allegati_pag
        AS (SELECT                                            /*+First_rows */
                  a.ID_DOCUMENTO_INDEX,
                   d.id_target,
                   NULL ID_PAGAMENTO,
                   NUM_PROTOCOLLO,
                   a.NOME_FILE,
                   NOME_ENTITA,
                   C.DT_INSERIMENTO DT_INSERIMENTO_FOLDER,
                   A.DT_AGGIORNAMENTO_INDEX
              FROM PBANDI_T_DOCUMENTO_INDEX a,
                   PBANDI_C_ENTITA b,
                   PBANDI_T_FILE c,
                   PBANDI_T_FILE_ENTITA d
             WHERE     d.id_entita = b.id_entita
                   AND nome_entita = 'PBANDI_T_PAGAMENTO'
                   AND c.ID_DOCUMENTO_INDEX = a.ID_DOCUMENTO_INDEX
                   AND d.id_file = c.id_file),
        REGOLA42
        AS (SELECT PROGR_BANDO_LINEA_INTERVENTO
              FROM PBANDI_R_REGOLA_BANDO_LINEA rbl, PBANDI_C_REGOLA r
             WHERE RBL.ID_REGOLA = R.ID_REGOLA
                   AND R.DESC_BREVE_REGOLA = 'BR42'),
        REGOLA42_1
        AS (SELECT PROGR_BANDO_LINEA_INTERVENTO
              FROM PBANDI_R_REGOLA_BANDO_LINEA rbl, PBANDI_C_REGOLA r
             WHERE RBL.ID_REGOLA = R.ID_REGOLA
                   AND R.DESC_BREVE_REGOLA = 'BR42')
   SELECT ID_DOCUMENTO_DI_SPESA,
          ID_PROGETTO,
          ID_STATO_DOCUMENTO_SPESA,
          DESC_STATO_DOCUMENTO_SPESA,
          TIPO_INVIO,
          FLAG_ELETTRONICO,
          ID_DICH_SPESA_APERTA,
          ID_PAGAMENTO,
          ID_DOCUMENTO_INDEX,
          NUM_PROTOCOLLO,
          NOME_FILE,
          ALLEGATO_DOCUMENTO,
          ALLEGATO_PAGAMENTO,
          DT_INSERIMENTO_FOLDER,
          DT_AGGIORNAMENTO_INDEX,
          BR42,
          (CASE
              WHEN (ID_STATO_DOCUMENTO_SPESA = 1 OR BR42 = 'N')
              THEN
                 NULL
              WHEN (FLAG_ELETTRONICO = 'S' OR TIPO_INVIO = 'D')
                   AND COUNT (ID_PAGAMENTO)
                       OVER (PARTITION BY ID_DOCUMENTO_DI_SPESA, ID_PROGETTO) !=
                          COUNT (
                             ALLEGATO_PAGAMENTO)
                          OVER (
                             PARTITION BY ID_DOCUMENTO_DI_SPESA, ID_PROGETTO)
              THEN
                 'N'                        -- obbl. allegato per il pagamento
              WHEN (FLAG_ELETTRONICO = 'S' OR TIPO_INVIO = 'D')
                   AND COUNT (ALLEGATO_DOCUMENTO)
                       OVER (PARTITION BY ID_DOCUMENTO_DI_SPESA, ID_PROGETTO) =
                          0
              THEN
                 'N'                        -- obbl. allegato per il documento
              WHEN (FLAG_ELETTRONICO = 'S')
                   AND COUNT (NUM_PROTOCOLLO)
                       OVER (PARTITION BY ID_DOCUMENTO_DI_SPESA, ID_PROGETTO) !=
                          1
              THEN
                 'N'                           --1 prot. e solo 1 per doc/prog
              ELSE
                 'S'
           END)
             CHECK_COMPLETO
     FROM (SELECT a.ID_DOCUMENTO_DI_SPESA,
                  a.ID_PROGETTO,
                  a.ID_STATO_DOCUMENTO_SPESA,
                  f.DESC_STATO_DOCUMENTO_SPESA,
                  a.TIPO_INVIO,
                  b.FLAG_ELETTRONICO,
                  e.ID_DICHIARAZIONE_SPESA ID_DICH_SPESA_APERTA,
                  NULL ID_PAGAMENTO,
                  d.ID_DOCUMENTO_INDEX,
                  d.NUM_PROTOCOLLO,
                  d.NOME_FILE,
                  (CASE
                      WHEN d.ID_DOCUMENTO_INDEX IS NOT NULL THEN 'S'
                      ELSE NULL
                   END)
                     ALLEGATO_DOCUMENTO,
                  NULL ALLEGATO_PAGAMENTO,
                  DECODE (i.PROGR_BANDO_LINEA_INTERVENTO, NULL, 'N', 'S')
                     BR42,
                  d.DT_INSERIMENTO_FOLDER,
                  d.DT_AGGIORNAMENTO_INDEX
             FROM REGOLA42 i,
                  PBANDI_T_DOMANDA h,
                  PBANDI_T_PROGETTO g,
                  PBANDI_D_STATO_DOCUMENTO_SPESA f,
                  dich_spesa e,
                  allegati_doc_spesa d,          --Allegati documento di spesa
                  PBANDI_T_DOCUMENTO_DI_SPESA b,
                  PBANDI_R_DOC_SPESA_PROGETTO a
            WHERE i.PROGR_BANDO_LINEA_INTERVENTO(+) =
                     h.PROGR_BANDO_LINEA_INTERVENTO
                  AND h.ID_DOMANDA = g.ID_DOMANDA
                  AND g.ID_PROGETTO = a.ID_PROGETTO
                  AND e.ID_PROGETTO(+) = a.ID_PROGETTO
                  AND e.ID_DOCUMENTO_DI_SPESA(+) = a.ID_DOCUMENTO_DI_SPESA
                  AND d.ID_TARGET(+) = a.ID_DOCUMENTO_DI_SPESA
                  AND f.ID_STATO_DOCUMENTO_SPESA = a.ID_STATO_DOCUMENTO_SPESA
                  AND a.ID_DOCUMENTO_DI_SPESA = b.ID_DOCUMENTO_DI_SPESA
           UNION ALL
           -- PAGAMENTI
           SELECT a.ID_DOCUMENTO_DI_SPESA,
                  c.ID_PROGETTO,
                  c.ID_STATO_DOCUMENTO_SPESA,
                  f.DESC_STATO_DOCUMENTO_SPESA,
                  c.TIPO_INVIO,
                  b.FLAG_ELETTRONICO,
                  e.ID_DICHIARAZIONE_SPESA ID_DICH_SPESA_APERTA,
                  a.ID_PAGAMENTO,
                  d.ID_DOCUMENTO_INDEX,
                  d.NUM_PROTOCOLLO,
                  d.NOME_FILE,
                  NULL ALLEGATO_DOCUMENTO,
                  (CASE
                      WHEN d.ID_DOCUMENTO_INDEX IS NOT NULL THEN 'S'
                      ELSE NULL
                   END)
                     ALLEGATO_PAGAMENTO,
                  DECODE (i.PROGR_BANDO_LINEA_INTERVENTO, NULL, 'N', 'S')
                     BR42,
                  d.DT_INSERIMENTO_FOLDER,
                  d.DT_AGGIORNAMENTO_INDEX
             FROM REGOLA42_1 i,
                  PBANDI_T_DOMANDA h,
                  PBANDI_T_PROGETTO g,
                  PBANDI_D_STATO_DOCUMENTO_SPESA f,
                  dich_spesa_1 e,
                  allegati_pag d,                         --Allegati pagamenti
                  PBANDI_R_DOC_SPESA_PROGETTO c,
                  PBANDI_T_DOCUMENTO_DI_SPESA b,
                  PBANDI_R_PAGAMENTO_DOC_SPESA a
            WHERE i.PROGR_BANDO_LINEA_INTERVENTO(+) =
                     h.PROGR_BANDO_LINEA_INTERVENTO
                  AND h.ID_DOMANDA = g.ID_DOMANDA
                  AND g.ID_PROGETTO = c.ID_PROGETTO
                  AND e.ID_PROGETTO(+) = c.ID_PROGETTO
                  AND e.ID_DOCUMENTO_DI_SPESA(+) = c.ID_DOCUMENTO_DI_SPESA
                  AND d.ID_TARGET(+) = a.ID_PAGAMENTO
                  AND f.ID_STATO_DOCUMENTO_SPESA = c.ID_STATO_DOCUMENTO_SPESA
                  AND c.ID_DOCUMENTO_DI_SPESA = b.ID_DOCUMENTO_DI_SPESA
                  AND b.ID_DOCUMENTO_DI_SPESA = a.ID_DOCUMENTO_DI_SPESA);

--PBANDI_V_CAND_FLUX_TRASV				  
CREATE OR REPLACE VIEW PBANDI_V_CAND_FLUX_TRASV
AS
   SELECT DISTINCT cod_utente codice_utente,
                   id_soggetto,
                   id_progetto,
                   id_istanza_processo,
                   id_tipo_anagrafica,
                   codice_ruolo,
                   dt_fine_validita
     FROM PBANDI_V_PROGETTI_FLUX
    WHERE     flag_aggiornato_flux = 'N'
          AND PROGR_SOGGETTO_PROGETTO IS NULL                   -- Trasversali
          AND id_istanza_processo IS NOT NULL;
		  
--PBANDI_V_CAND_FLUX_TRASV_LIM
CREATE OR REPLACE VIEW PBANDI_V_CAND_FLUX_TRASV_LIM
AS
   WITH F_SOGG_TIPO_ANAG_FLUX_L
        AS                                                         -- Limitato
          (SELECT id_soggetto, id_tipo_anagrafica
             FROM ( --Sono selezionati in modo distinti i soggetti/ruoli per essere poi limitati
                   SELECT  DISTINCT id_soggetto, id_tipo_anagrafica
                      FROM PBANDI_V_PROGETTI_FLUX
                     WHERE     flag_aggiornato_flux = 'N'
                           AND PROGR_SOGGETTO_PROGETTO IS NULL
                           AND id_istanza_processo IS NOT NULL)
            WHERE ROWNUM <=
                     (SELECT valore
                        FROM PBANDI_C_COSTANTI
                       WHERE attributo =
                                'conf.maxNumCandidatiBatchFluxTrasv'))
   SELECT codice_utente,
          a.id_soggetto,
          id_progetto,
          a.id_istanza_processo,
          a.id_tipo_anagrafica,
		  a.codice_ruolo,
          dt_fine_validita
     FROM PBANDI_V_CAND_FLUX_TRASV a, F_SOGG_TIPO_ANAG_FLUX_L b
    WHERE a.id_soggetto = b.id_soggetto
          AND a.id_tipo_anagrafica = b.id_tipo_anagrafica;
		  
----------------------
-- Checklist
----------------------
--Datatype
CREATE OR REPLACE TYPE        OBJCHECKLIST AS OBJECT
(ID_TIPO_MODELLO VARCHAR2(8),
 ID_APPALTO VARCHAR2(8), 
 OGGETTO_APPALTO VARCHAR2(2000),  
 PROGR_ORDINAMENTO VARCHAR2(8),
 COD_CONTROLLO VARCHAR2(20),  
 DESCR_RIGA VARCHAR2(4000),  
 IMPORTO_CONTRATTO VARCHAR2(20),
 BILANCIO_PREVENTIVO VARCHAR2(20),
 DT_FIRMA_CONTRATTO VARCHAR2(20),
 DT_INIZIO_PREVISTA VARCHAR2(20),
 DT_CONSEGNA_LAVORI VARCHAR2(20),
 DT_GUUE VARCHAR2(20),
 DT_GURI VARCHAR2(20),
 DT_QUOT_NAZIONALI VARCHAR2(20),
 DT_WEB_STAZ_APPALTANTE VARCHAR2(20),
 DT_WEB_OSSERVATORIO VARCHAR2(20),
 DESC_TIPOLOGIA_AGGIUDICAZIONE VARCHAR2(255),
 FLAG_ESITO VARCHAR2(10),
 NOTE VARCHAR2(4000),
 SPIEGAZIONI VARCHAR2(2000),
 NORMA VARCHAR2(2000),
 NORMATIVARIFERIMENTO VARCHAR2(2000),
 CRITERISELEZIONE VARCHAR2(2000),
 SUPPLEMENTARITITOLO VARCHAR2(2000),
 SUPPLEMENTARIDATAFIRMA VARCHAR2(2000),
 SUPPLEMENTARIAMMONTARE VARCHAR2(2000),
 SUPPLEMENTARIDATACONSEGNA VARCHAR2(2000),
 SUPPLEMENTARIDATAEFFETTIVA VARCHAR2(2000),
 SUPPLEMENTARIGIUSTIFICAZIONE VARCHAR2(2000),
 DATANONCONTRATTUALI VARCHAR2(2000),
 IMPORTONONCONTRATTUALI VARCHAR2(2000),
 DATANONESEGUITI VARCHAR2(2000),
 IMPORTONONESEGUITI VARCHAR2(2000)
 );
/

CREATE OR REPLACE TYPE        LISTCHECKLIST AS TABLE OF OBJCHECKLIST
/
  
--PBANDI_T_APPALTO_CHECKLIST
CREATE TABLE PBANDI_T_APPALTO_CHECKLIST
(ID_APPALTO_CHECKLIST INTEGER,
 ID_APPALTO NUMBER(8) NOT NULL,
 ID_CHECKLIST NUMBER(8) NOT NULL
); 

COMMENT ON TABLE PBANDI_T_APPALTO_CHECKLIST IS
'TABELLA DI ASSOCIAZIONE APPALTO CHECKLIST';

ALTER TABLE PBANDI_T_APPALTO_CHECKLIST ADD 
(
CONSTRAINT PK_PBANDI_T_APPALTO_CHECKLIST
PRIMARY KEY (ID_APPALTO_CHECKLIST)
USING INDEX TABLESPACE PBANDI_SMALL_IDX
);

ALTER TABLE PBANDI_T_APPALTO_CHECKLIST ADD 
(
CONSTRAINT AK1_PBANDI_T_APPALTO_CHECKLIST
UNIQUE (ID_APPALTO,ID_CHECKLIST)
USING INDEX TABLESPACE PBANDI_SMALL_IDX
);

CREATE INDEX IE1_PBANDI_T_APPALTO_CHECKLIST
ON PBANDI_T_APPALTO_CHECKLIST (ID_CHECKLIST)
TABLESPACE PBANDI_SMALL_IDX;

ALTER TABLE PBANDI_T_APPALTO_CHECKLIST ADD 
CONSTRAINT FK_PBANDI_T_APPALTO_02
FOREIGN KEY (ID_APPALTO)
REFERENCES PBANDI_T_APPALTO(ID_APPALTO);
 
ALTER TABLE PBANDI_T_APPALTO_CHECKLIST ADD 
CONSTRAINT FK_PBANDI_T_CHECKLIST_02
FOREIGN KEY (ID_CHECKLIST)
REFERENCES PBANDI_T_CHECKLIST (ID_CHECKLIST);

CREATE SEQUENCE SEQ_PBANDI_T_APPALTO_CHECKLIST
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


--PBANDI_T_DETT_CHECK_APPALTI  
CREATE TABLE PBANDI_T_DETT_CHECK_APPALTI
(ID_DETT_CHECK_APPALTI INTEGER,
 ID_APPALTO_CHECKLIST INTEGER NOT NULL,
 COD_CONTROLLO VARCHAR2(20),
 FLAG_ESITO VARCHAR2(2) CHECK (FLAG_ESITO IN ('S','N','NA')),
 NOTE VARCHAR2(4000)
);

COMMENT ON TABLE PBANDI_T_DETT_CHECK_APPALTI IS
'TABELLA DI DETTAGLIO CON I FLAG RELATIVI AI CODICI CONTROLLLO';

ALTER TABLE PBANDI_T_DETT_CHECK_APPALTI ADD 
(
CONSTRAINT PK_PBANDI_T_DETT_CHECK_APPALTI
PRIMARY KEY (ID_DETT_CHECK_APPALTI)
USING INDEX TABLESPACE PBANDI_SMALL_IDX
);

ALTER TABLE PBANDI_T_DETT_CHECK_APPALTI ADD 
(
CONSTRAINT AK1_PBANDI_T_DET_CHK_APP
UNIQUE (ID_APPALTO_CHECKLIST, COD_CONTROLLO)
USING INDEX TABLESPACE PBANDI_SMALL_IDX
);

ALTER TABLE PBANDI_T_DETT_CHECK_APPALTI ADD 
CONSTRAINT FK_PBANDI_T_APPALTO_CHK_01
FOREIGN KEY (ID_APPALTO_CHECKLIST)
REFERENCES PBANDI_T_APPALTO_CHECKLIST(ID_APPALTO_CHECKLIST);
 
CREATE SEQUENCE SEQ_PBANDI_T_DET_CHECK_APPALTI
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;
  
--PBANDI_T_DETT_CHECK_APP_ITEM
CREATE TABLE PBANDI_T_DETT_CHECK_APP_ITEM
(ID_DETT_CHECK_APP_ITEM INTEGER, 
 ID_DETT_CHECK_APPALTI   INTEGER,
 NOME_CAMPO_EDIT VARCHAR2(200),
 VALORE_EDIT VARCHAR2(2000)
) TABLESPACE PBANDI_MEDIUM_TBL;

COMMENT ON TABLE PBANDI_T_DETT_CHECK_APP_ITEM IS
'TABELLA DI DETTAGLIO CON I CAMPI DI EDIT RELATIVI AI CODICI CONTROLLLO';

ALTER TABLE PBANDI_T_DETT_CHECK_APP_ITEM ADD  
( 
CONSTRAINT PK_PBANDI_T_DETT_CHECK_APP_IT
PRIMARY KEY (ID_DETT_CHECK_APP_ITEM)
USING INDEX
TABLESPACE PBANDI_SMALL_IDX 
);

ALTER TABLE PBANDI_T_DETT_CHECK_APP_ITEM  ADD 
(CONSTRAINT FK_PBANDI_T_DETT_CHECK_APPALTI  FOREIGN KEY ( ID_DETT_CHECK_APPALTI) REFERENCES PBANDI_T_DETT_CHECK_APPALTI );

CREATE INDEX IE1_PBANDI_T_DETT_CHECK_APP_IT ON PBANDI_T_DETT_CHECK_APP_ITEM
(ID_DETT_CHECK_APPALTI)  TABLESPACE PBANDI_MEDIUM_IDX;

CREATE SEQUENCE SEQ_PBANDI_T_DETT_CHK_APP_ITEM
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;
 
--PBANDI_D_TIPO_MODELLO
CREATE TABLE PBANDI_D_TIPO_MODELLO
(ID_TIPO_MODELLO NUMBER(8),
 DESCR_TIPO_MODELLO VARCHAR2(100)
);
COMMENT ON TABLE PBANDI_D_TIPO_MODELLO IS
'TABELLA CHE DEFINISCE IL TIPO MODELLO';

ALTER TABLE PBANDI_D_TIPO_MODELLO ADD 
(
CONSTRAINT PK_PBANDI_D_TIPO_MODELLO
PRIMARY KEY (ID_TIPO_MODELLO)
USING INDEX TABLESPACE PBANDI_SMALL_IDX
);

--PBANDI_C_MODELLO
ALTER TABLE PBANDI_C_MODELLO
ADD ID_TIPO_MODELLO NUMBER(8);

ALTER TABLE PBANDI_C_MODELLO ADD 
CONSTRAINT FK_PBANDI_D_TIPO_MODELLO_01
FOREIGN KEY (ID_TIPO_MODELLO)
REFERENCES PBANDI_D_TIPO_MODELLO(ID_TIPO_MODELLO);

CREATE INDEX IE1_PBANDI_C_MODELLO
ON PBANDI_C_MODELLO (ID_TIPO_MODELLO)
TABLESPACE PBANDI_SMALL_IDX;

--PBANDI_C_TEMPL_CHECKLIST
CREATE TABLE PBANDI_C_TEMPL_CHECKLIST
(ID_TIPO_MODELLO NUMBER(8) NOT NULL,
 PROGR_ORDINAMENTO INTEGER NOT NULL,
 COD_CONTROLLO VARCHAR2(20),
 DESCR_RIGA VARCHAR2(4000),
 ID_ATTRIBUTO NUMBER(5),
 NOME_CAMPO_EDIT VARCHAR2(30)
);

COMMENT ON TABLE PBANDI_C_TEMPL_CHECKLIST IS
'TABELLA CHE DEFINISCE LA CONFIGURAZIONE DELLA CHECKLIST PER CIASCUN TIPO MODELLO';

ALTER TABLE PBANDI_C_TEMPL_CHECKLIST ADD 
(
CONSTRAINT PK_PBANDI_C_TEMPL_CHECKLIST
PRIMARY KEY (ID_TIPO_MODELLO,PROGR_ORDINAMENTO)
USING INDEX TABLESPACE PBANDI_SMALL_IDX
);

ALTER TABLE PBANDI_C_TEMPL_CHECKLIST ADD 
CONSTRAINT FK_PBANDI_D_TIPO_MODELLO_02
FOREIGN KEY (ID_TIPO_MODELLO)
REFERENCES PBANDI_D_TIPO_MODELLO(ID_TIPO_MODELLO);

ALTER TABLE PBANDI_C_TEMPL_CHECKLIST ADD 
CONSTRAINT FK_PBANDI_C_ATTRIBUTO_02
FOREIGN KEY (ID_ATTRIBUTO)
REFERENCES PBANDI_C_ATTRIBUTO(ID_ATTRIBUTO);

CREATE INDEX IE1_PBANDI_C_TEMPL_CHECKLIST
ON PBANDI_C_TEMPL_CHECKLIST (ID_ATTRIBUTO)
TABLESPACE PBANDI_SMALL_IDX;

