/*******************************************************************************
* Copyright Regione Piemonte - 2024
* SPDX-License-Identifier: EUPL-1.2
******************************************************************************/

-- PBANDI_T_FOLDER FILE
CREATE TABLE PBANDI_T_FOLDER
(
  ID_FOLDER  		INTEGER,
  ID_PADRE   				INTEGER,
  NOME_FOLDER  			VARCHAR2(200) NOT NULL,
  ID_SOGGETTO_BEN           NUMBER(8),
  ID_UTENTE_INS            	NUMBER(8)     NOT NULL,
  ID_UTENTE_AGG            	NUMBER(8),
  DT_INSERIMENTO           	DATE          NOT NULL,
  DT_AGGIORNAMENTO         	DATE
)
TABLESPACE PBANDI_SMALL_TBL
;

ALTER TABLE PBANDI_T_FOLDER ADD (
  CONSTRAINT PK_PBANDI_T_FOLDER
  PRIMARY KEY
  (ID_FOLDER)
 USING INDEX TABLESPACE PBANDI_SMALL_IDX);
 
 ALTER TABLE PBANDI_T_FOLDER ADD (
  CONSTRAINT AK1_PBANDI_T_FOLDER
  UNIQUE
  (ID_PADRE,NOME_FOLDER,ID_SOGGETTO_BEN)
 USING INDEX TABLESPACE PBANDI_SMALL_IDX);
 

 ALTER TABLE PBANDI_T_FOLDER ADD (
  CONSTRAINT FK_PBANDI_T_SOGGETTO_21 
  FOREIGN KEY (ID_SOGGETTO_BEN) 
  REFERENCES PBANDI_T_SOGGETTO (ID_SOGGETTO),
  CONSTRAINT FK_PBANDI_T_FOLDER_01
  FOREIGN KEY (ID_PADRE)
  REFERENCES PBANDI_T_FOLDER (ID_FOLDER),
  CONSTRAINT FK_PBANDI_T_UTENTE_255 
  FOREIGN KEY (ID_UTENTE_INS) 
  REFERENCES PBANDI_T_UTENTE (ID_UTENTE),
  CONSTRAINT FK_PBANDI_T_UTENTE_256
  FOREIGN KEY (ID_UTENTE_AGG)
  REFERENCES PBANDI_T_UTENTE (ID_UTENTE)
  ON DELETE SET NULL);
  
 CREATE INDEX IE_PBANDI_T_FOLDER_01 ON PBANDI_T_FOLDER
(ID_SOGGETTO_BEN)
 TABLESPACE PBANDI_SMALL_IDX;

COMMENT ON TABLE PBANDI_T_FOLDER IS 'Tabella di organizzazione in cartelle dei file relativi ai documenti (DEMATERIALIZZAZIONE)';

COMMENT ON COLUMN PBANDI_T_FOLDER.ID_FOLDER IS 'Chiave artificiale generata da sequence';
COMMENT ON COLUMN PBANDI_T_FOLDER.ID_PADRE IS 'Chiave esterna che referenzia la cartella superiore (NULL per il primo livello)';
COMMENT ON COLUMN PBANDI_T_FOLDER.NOME_FOLDER IS 'Nome della cartella';
COMMENT ON COLUMN PBANDI_T_FOLDER.ID_SOGGETTO_BEN IS 'Chiave esterna su PBANDI_T_SOGGETTO (Beneficiario proprietario della cartella)';

CREATE SEQUENCE SEQ_PBANDI_T_FOLDER
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


  
-- PBANDI_R_FOLDER_FILE_DOC_INDEXFILE
CREATE TABLE PBANDI_R_FOLDER_FILE_DOC_INDEX
(
  ID_FOLDER  		INTEGER,
  ID_DOCUMENTO_INDEX  		NUMBER(8),
  NOME_FILE                 VARCHAR2(255) NOT NULL,
  SIZE_FILE                 NUMBER,
  ID_UTENTE_INS            	NUMBER(8)     NOT NULL,
  DT_INSERIMENTO           	DATE          NOT NULL, 
  ID_UTENTE_AGG            	NUMBER(8),
  DT_AGGIORNAMENTO         	DATE)
TABLESPACE PBANDI_SMALL_TBL
;
  
ALTER TABLE PBANDI_R_FOLDER_FILE_DOC_INDEX ADD (
  CONSTRAINT PK_PBANDI_R_FOLD_FILE_DOC_IND
  PRIMARY KEY
  (ID_FOLDER,
   ID_DOCUMENTO_INDEX)
 USING INDEX TABLESPACE PBANDI_SMALL_IDX);

ALTER TABLE PBANDI_R_FOLDER_FILE_DOC_INDEX ADD (
  CONSTRAINT AK1_PBANDI_R_FOLD_FILE_DOC_IND
  UNIQUE
  (ID_FOLDER,NOME_FILE)
 USING INDEX TABLESPACE PBANDI_SMALL_IDX); 
 
 CREATE INDEX IE_PBANDI_R_FOL_FIL_DOC_IND_01 ON PBANDI_R_FOLDER_FILE_DOC_INDEX
(ID_DOCUMENTO_INDEX)
 TABLESPACE PBANDI_SMALL_IDX;

 
 ALTER TABLE PBANDI_R_FOLDER_FILE_DOC_INDEX ADD (
  CONSTRAINT FK_PBANDI_T_FOLDER_02 
  FOREIGN KEY (ID_FOLDER) 
  REFERENCES PBANDI_T_FOLDER (ID_FOLDER),
  CONSTRAINT FK_PBANDI_T_DOCUMENTO_INDEX_04 
  FOREIGN KEY (ID_DOCUMENTO_INDEX) 
  REFERENCES PBANDI_T_DOCUMENTO_INDEX (ID_DOCUMENTO_INDEX),
  CONSTRAINT FK_PBANDI_T_UTENTE_257
  FOREIGN KEY (ID_UTENTE_INS) 
  REFERENCES PBANDI_T_UTENTE (ID_UTENTE));
  
COMMENT ON TABLE PBANDI_R_FOLDER_FILE_DOC_INDEX IS 'Tabella di organizzazione in cartelle dei file relativi ai documenti (DEMATERIALIZZAZIONE)';

COMMENT ON COLUMN PBANDI_R_FOLDER_FILE_DOC_INDEX.ID_FOLDER IS 'Chiave esterna su PBANDI_T_FOLDER';
COMMENT ON COLUMN PBANDI_R_FOLDER_FILE_DOC_INDEX.ID_DOCUMENTO_INDEX IS 'Chiave esterna su  PBANDI_T_DOCUMENTO_INDEX';
COMMENT ON COLUMN PBANDI_R_FOLDER_FILE_DOC_INDEX.NOME_FILE IS 'Nome del file univoco nella cartella';
COMMENT ON COLUMN PBANDI_R_FOLDER_FILE_DOC_INDEX.SIZE_FILE IS 'Size del file per poter controllare lo spazio destinato all''utente';

--PBANDI_T_DOCUMENTO_DI_SPESA

--ALTER TABLE PBANDI_T_DOCUMENTO_DI_SPESA ADD (TIPO_INVIO VARCHAR2(1), NUM_PROTOCOLLO VARCHAR2(100));
--ALTER TABLE PBANDI_T_DOCUMENTO_DI_SPESA ADD (TIPO_INVIO VARCHAR2(1));
ALTER TABLE PBANDI_T_DOCUMENTO_DI_SPESA ADD (FLAG_ELETTRONICO VARCHAR2(1) DEFAULT 'N' NOT NULL);

COMMENT ON COLUMN PBANDI_T_DOCUMENTO_DI_SPESA.FLAG_ELETTRONICO IS 'Indica se il documento è di tipo elettronico (S/N)';
--COMMENT ON COLUMN PBANDI_T_DOCUMENTO_DI_SPESA.TIPO_INVIO IS 'Tipo di invio : C=Cartaceo, E=Elettronico, S=Scansione';
--COMMENT ON COLUMN PBANDI_T_DOCUMENTO_DI_SPESA.NUM_PROTOCOLLO IS 'Numero di protocollo referenziato all''invio elettronico';

ALTER TABLE PBANDI_T_DOCUMENTO_DI_SPESA ADD (
  CONSTRAINT CK_PBANDI_T_DOC_SP_01
  CHECK (FLAG_ELETTRONICO IN ('S','N')));
  
/*
ALTER TABLE PBANDI_T_DOCUMENTO_DI_SPESA ADD (
  CONSTRAINT CK_PBANDI_T_DOC_SP_01
  CHECK ((NUM_PROTOCOLLO IS NOT NULL AND TIPO_INVIO = 'E') OR (NUM_PROTOCOLLO IS  NULL AND TIPO_INVIO IN ('C','S'))));
  
ALTER TABLE PBANDI_T_DOCUMENTO_DI_SPESA ADD (
  CONSTRAINT CK_PBANDI_T_DOC_SP_01
  CHECK (TIPO_INVIO IN ('C','S','E'));
*/

  

--PBANDI_R_DOC_SPESA_PROGETTO
ALTER TABLE PBANDI_R_DOC_SPESA_PROGETTO ADD (TIPO_INVIO VARCHAR2(1) DEFAULT 'C' NOT NULL);
COMMENT ON COLUMN PBANDI_R_DOC_SPESA_PROGETTO.TIPO_INVIO IS 'Tipo di invio : C=Cartaceo, D=Digitale';

ALTER TABLE PBANDI_R_DOC_SPESA_PROGETTO ADD (
  CONSTRAINT CK_PBANDI_R_DOC_SP_PR_01
  CHECK (TIPO_INVIO IN ('C','D')));

  
--PBANDI_T_DOCUMENTO_INDEX
ALTER TABLE PBANDI_T_DOCUMENTO_INDEX ADD (NUM_PROTOCOLLO VARCHAR2(100));
COMMENT ON COLUMN PBANDI_T_DOCUMENTO_INDEX.NUM_PROTOCOLLO IS 'Numero di protocollo referenziato all''invio elettronico';

--PBANDI_R_PAG_QUOT_PARTE_DOC_SP
ALTER TABLE PBANDI_R_PAG_QUOT_PARTE_DOC_SP ADD (NOTE_VALIDAZIONE VARCHAR2(4000));

--PBANDI_S_DICH_DOC_SPESA
ALTER TABLE PBANDI_S_DICH_DOC_SPESA ADD (NOTE_VALIDAZIONE VARCHAR2(4000));

--PBANDI_T_APPALTO
ALTER TABLE PBANDI_T_APPALTO MODIFY  (OGGETTO_APPALTO VARCHAR2(2000));

--PBANDI_C_ENTITA
CREATE INDEX IE_PBANDI_C_ENTITA ON PBANDI_C_ENTITA
(NOME_ENTITA)
TABLESPACE PBANDI_SMALL_IDX;

--PBANDI_T_DOCUMENTO_INDEX
CREATE INDEX IE_PBANDI_T_DOCUMENTO_INDEX_02 ON PBANDI_T_DOCUMENTO_INDEX
(ID_ENTITA)
TABLESPACE PBANDI_MEDIUM_IDX;

CREATE INDEX IE_PBANDI_T_DOCUMENTO_INDEX_03 ON PBANDI_T_DOCUMENTO_INDEX
(ID_TARGET)
TABLESPACE PBANDI_MEDIUM_IDX;

--PBANDI_C_REGOLA
CREATE UNIQUE INDEX IE_PBANDI_C_REGOLA_01 ON PBANDI_C_REGOLA
(DESC_BREVE_REGOLA)
TABLESPACE PBANDI_SMALL_IDX;

--PBANDI_R_PROGETTI_APPALTI
ALTER TABLE PBANDI_R_PROGETTI_APPALTI DROP PRIMARY KEY  DROP INDEX;

ALTER TABLE PBANDI_R_PROGETTI_APPALTI
 ADD (ID_TIPO_DOCUMENTO_INDEX  NUMBER(3));

COMMENT ON COLUMN PBANDI_R_PROGETTI_APPALTI.ID_TIPO_DOCUMENTO_INDEX IS 'Chiave esterna PBANDI_C_TIPO_DOCUMENTO_INDEX';

UPDATE PBANDI_R_PROGETTI_APPALTI
SET ID_TIPO_DOCUMENTO_INDEX = 2;

ALTER TABLE PBANDI_R_PROGETTI_APPALTI ADD (
  CONSTRAINT PK_PBANDI_R_PROGETTI_APPALTI
  PRIMARY KEY
  (ID_PROGETTO, ID_APPALTO, ID_TIPO_DOCUMENTO_INDEX)
  USING INDEX TABLESPACE PBANDI_SMALL_IDX); 
  
ALTER TABLE PBANDI_R_PROGETTI_APPALTI ADD 
CONSTRAINT FK_PBANDI_C_TIPO_DOC_INDEX_07
 FOREIGN KEY (ID_TIPO_DOCUMENTO_INDEX)
 REFERENCES PBANDI_C_TIPO_DOCUMENTO_INDEX (ID_TIPO_DOCUMENTO_INDEX);
 
CREATE INDEX IE_PBANDI_R_PROG_APPALTI_02 ON PBANDI_R_PROGETTI_APPALTI
(ID_TIPO_DOCUMENTO_INDEX)
TABLESPACE PBANDI_SMALL_IDX;

--PBANDI_T_RIBASSO_ASTA
ALTER TABLE PBANDI_T_RIBASSO_ASTA
MODIFY(ID_CONTO_ECONOMICO  NULL);

--PBANDI_D_TIPO_AFFIDAMENTO
CREATE TABLE PBANDI_D_TIPO_AFFIDAMENTO
(
  ID_TIPO_AFFIDAMENTO    INTEGER,
  DESC_TIPO_AFFIDAMENTO  VARCHAR2(50 BYTE)
)
TABLESPACE PBANDI_SMALL_TBL;

COMMENT ON TABLE PBANDI_D_TIPO_AFFIDAMENTO IS 'Tipologie di affidamento (Appalto,Contratto,Incarico)';


ALTER TABLE PBANDI_D_TIPO_AFFIDAMENTO ADD (
  CONSTRAINT PK_PBANDI_D_TIPO_AFFIDAMENTO
  PRIMARY KEY
  (ID_TIPO_AFFIDAMENTO)
  USING INDEX TABLESPACE PBANDI_SMALL_IDX);
  
--PBANDI_T_APPALTO
ALTER TABLE PBANDI_T_APPALTO
 ADD (ID_TIPO_AFFIDAMENTO  INTEGER);
 
ALTER TABLE PBANDI_T_APPALTO ADD (
  CONSTRAINT FK_PBANDI_D_TIPO_AFFIDAMEN_01 
  FOREIGN KEY (ID_TIPO_AFFIDAMENTO) 
  REFERENCES PBANDI_D_TIPO_AFFIDAMENTO (ID_TIPO_AFFIDAMENTO));

CREATE OR REPLACE TRIGGER TG_PBANDI_R_REG_BANDO_LIN_BUD
   before update or delete on PBANDI_R_REGOLA_BANDO_LINEA
   referencing old as OLD new as NEW
   for each row
WHEN (
OLD.ID_REGOLA=42
      )
DECLARE

    v_id_documento_di_spesa PBANDI_T_DOCUMENTO_DI_SPESA.id_documento_di_spesa%TYPE;

   Cursor c1 (c_progr_bando_linea_intervento NUMBER) is
      SELECT /*+FIRST_ROWS */ c.id_documento_di_spesa
      FROM PBANDI_T_DOMANDA a,
           PBANDI_T_PROGETTO b,
           PBANDI_R_DOC_SPESA_PROGETTO c,
           PBANDI_T_DOCUMENTO_DI_SPESA d
      WHERE a.progr_bando_linea_intervento = c_progr_bando_linea_intervento
      AND b.id_domanda = a.id_domanda
      AND c.id_progetto = b.id_progetto
      AND d.id_documento_di_spesa = c.id_documento_di_spesa
      AND (c.tipo_invio IN ('E','S') OR d.flag_elettronico = 'S');
      
      
BEGIN
/*
  Controllo che non sia disassociato un bando linea alla regola BR42 di Dematerializzazione
  se esiste almeno un documento (PBANDI_T_DOCUMENTO_DI_SPESA) con tipo invio E=Elettronico, S=Scansione
  associato ad un progetto che afferisce al bando linea in questione
*/

   OPEN c1 (:old.progr_bando_linea_intervento);
   FETCH c1 INTO v_id_documento_di_spesa;
   IF c1%FOUND THEN
      RAISE_APPLICATION_ERROR(-20000,'Disassociazione non consentita: Esiste almeno un documento di spesa con tipo invio E/S');
   END IF;
   CLOSE c1;

END;
/

			

CREATE OR REPLACE VIEW PBANDI_V_SITUAZIONE_DOC AS
 WITH   dich_spesa
        AS (SELECT   b.ID_DICHIARAZIONE_SPESA,
                   a.ID_DOCUMENTO_DI_SPESA,
                   b.ID_PROGETTO
              FROM PBANDI_T_DICHIARAZIONE_SPESA b, PBANDI_S_DICH_DOC_SPESA a
             WHERE b.ID_DICHIARAZIONE_SPESA = a.ID_DICHIARAZIONE_SPESA
             AND b.DT_CHIUSURA_VALIDAZIONE IS NULL
             ),
        dich_spesa_1
        AS (SELECT   b.ID_DICHIARAZIONE_SPESA,
                   a.ID_DOCUMENTO_DI_SPESA,
                   b.ID_PROGETTO
              FROM PBANDI_T_DICHIARAZIONE_SPESA b, PBANDI_S_DICH_DOC_SPESA a
             WHERE b.ID_DICHIARAZIONE_SPESA = a.ID_DICHIARAZIONE_SPESA
             AND b.DT_CHIUSURA_VALIDAZIONE IS NULL
             ),
        allegati_doc_spesa
        AS (
           SELECT /*+First_rows */ a.ID_DOCUMENTO_INDEX,
                   id_target,
                   NULL ID_PAGAMENTO,
                   NUM_PROTOCOLLO,
                   a.NOME_FILE,
                   NOME_ENTITA,
				   C.DT_INSERIMENTO DT_INSERIMENTO_FOLDER,
				   A.DT_AGGIORNAMENTO_INDEX
              FROM PBANDI_T_DOCUMENTO_INDEX a, PBANDI_C_ENTITA b, PBANDI_R_FOLDER_FILE_DOC_INDEX c
             WHERE a.id_entita = b.id_entita
                   AND nome_entita = 'PBANDI_T_DOCUMENTO_DI_SPESA'
				   AND c.ID_DOCUMENTO_INDEX = a.ID_DOCUMENTO_INDEX),
        allegati_pag
        AS (
           SELECT  /*+First_rows */ a.ID_DOCUMENTO_INDEX,
                   id_target,
                   NULL ID_PAGAMENTO,
                   NUM_PROTOCOLLO,
                   a.NOME_FILE,
                   NOME_ENTITA,
				   C.DT_INSERIMENTO DT_INSERIMENTO_FOLDER,
				   A.DT_AGGIORNAMENTO_INDEX
              FROM PBANDI_T_DOCUMENTO_INDEX a, PBANDI_C_ENTITA b, PBANDI_R_FOLDER_FILE_DOC_INDEX c
             WHERE a.id_entita = b.id_entita
                   AND nome_entita = 'PBANDI_T_PAGAMENTO'
				   AND c.ID_DOCUMENTO_INDEX = a.ID_DOCUMENTO_INDEX),
        REGOLA42
        AS (SELECT PROGR_BANDO_LINEA_INTERVENTO
              FROM PBANDI_R_REGOLA_BANDO_LINEA rbl, PBANDI_C_REGOLA r
             WHERE RBL.ID_REGOLA = R.ID_REGOLA
                   AND R.DESC_BREVE_REGOLA = 'BR42'),
        REGOLA42_1
        AS (SELECT PROGR_BANDO_LINEA_INTERVENTO
              FROM PBANDI_R_REGOLA_BANDO_LINEA rbl, PBANDI_C_REGOLA r
             WHERE RBL.ID_REGOLA = R.ID_REGOLA
                   AND R.DESC_BREVE_REGOLA = 'BR42')
        SELECT  
		       ID_DOCUMENTO_DI_SPESA,
			   ID_PROGETTO,
			   ID_STATO_DOCUMENTO_SPESA,
			   DESC_STATO_DOCUMENTO_SPESA,
			   TIPO_INVIO,
			   FLAG_ELETTRONICO,
			   ID_DICH_SPESA_APERTA,
			   ID_PAGAMENTO,
			   ID_DOCUMENTO_INDEX,
			   NUM_PROTOCOLLO,
			   NOME_FILE,
			   ALLEGATO_DOCUMENTO,
			   ALLEGATO_PAGAMENTO,
			   DT_INSERIMENTO_FOLDER,
			   DT_AGGIORNAMENTO_INDEX,
			   BR42,
               (CASE
                  WHEN (ID_STATO_DOCUMENTO_SPESA = 1 OR BR42= 'N')
                     THEN NULL
                  WHEN  (FLAG_ELETTRONICO = 'S' OR TIPO_INVIO = 'D') AND COUNT(ID_PAGAMENTO)  OVER (PARTITION BY ID_DOCUMENTO_DI_SPESA,ID_PROGETTO) !=
                                                                                                           COUNT(ALLEGATO_PAGAMENTO)  OVER (PARTITION BY ID_DOCUMENTO_DI_SPESA,ID_PROGETTO)
                     THEN 'N' -- obbl. allegato per il pagamento
                  WHEN  (FLAG_ELETTRONICO = 'S' OR TIPO_INVIO = 'D') AND COUNT(ALLEGATO_DOCUMENTO)  OVER (PARTITION BY ID_DOCUMENTO_DI_SPESA,ID_PROGETTO) = 0
                     THEN 'N' -- obbl. allegato per il documento
                  WHEN  (FLAG_ELETTRONICO = 'S') AND COUNT(NUM_PROTOCOLLO) OVER (PARTITION BY ID_DOCUMENTO_DI_SPESA,ID_PROGETTO)!= 1  THEN 'N' --1 prot. e solo 1 per doc/prog
                     ELSE 'S'
                END) CHECK_COMPLETO
				FROM 
        (
        SELECT  
                    a.ID_DOCUMENTO_DI_SPESA,
                    a.ID_PROGETTO,
                    a.ID_STATO_DOCUMENTO_SPESA,
                    f.DESC_STATO_DOCUMENTO_SPESA,
                    a.TIPO_INVIO,
                    b.FLAG_ELETTRONICO,
                    e.ID_DICHIARAZIONE_SPESA ID_DICH_SPESA_APERTA,
                    NULL ID_PAGAMENTO,
                    d.ID_DOCUMENTO_INDEX,
                    d.NUM_PROTOCOLLO,
                    d.NOME_FILE,
                     (CASE
                        WHEN d.ID_DOCUMENTO_INDEX IS NOT NULL 
                           THEN 'S'
                        ELSE NULL
                     END) ALLEGATO_DOCUMENTO,
					 NULL ALLEGATO_PAGAMENTO,
                     DECODE (i.PROGR_BANDO_LINEA_INTERVENTO,
                               NULL, 'N',
                               'S') BR42,
				    d.DT_INSERIMENTO_FOLDER,
					d.DT_AGGIORNAMENTO_INDEX
               FROM 
                    REGOLA42 i,
                    PBANDI_T_DOMANDA h,
                    PBANDI_T_PROGETTO g,
                    PBANDI_D_STATO_DOCUMENTO_SPESA f,
                    dich_spesa e,
                    allegati_doc_spesa d,      --Allegati documento di spesa
                    PBANDI_T_DOCUMENTO_DI_SPESA b,
                    PBANDI_R_DOC_SPESA_PROGETTO a
              WHERE i.PROGR_BANDO_LINEA_INTERVENTO(+) = h.PROGR_BANDO_LINEA_INTERVENTO
                AND h.ID_DOMANDA = g.ID_DOMANDA
                AND g.ID_PROGETTO = a.ID_PROGETTO
                AND e.ID_PROGETTO(+) = a.ID_PROGETTO
                AND e.ID_DOCUMENTO_DI_SPESA(+) = a.ID_DOCUMENTO_DI_SPESA
                AND d.ID_TARGET(+) = a.ID_DOCUMENTO_DI_SPESA
                AND f.ID_STATO_DOCUMENTO_SPESA = a.ID_STATO_DOCUMENTO_SPESA
                AND a.ID_DOCUMENTO_DI_SPESA = b.ID_DOCUMENTO_DI_SPESA
        UNION ALL
                -- PAGAMENTI
                SELECT   
                    a.ID_DOCUMENTO_DI_SPESA,
                    c.ID_PROGETTO,
                    c.ID_STATO_DOCUMENTO_SPESA,
                    f.DESC_STATO_DOCUMENTO_SPESA,
                    c.TIPO_INVIO,
                    b.FLAG_ELETTRONICO,
                    e.ID_DICHIARAZIONE_SPESA ID_DICH_SPESA_APERTA,
                    a.ID_PAGAMENTO,
                    d.ID_DOCUMENTO_INDEX,
                    d.NUM_PROTOCOLLO,
                    d.NOME_FILE,
					NULL ALLEGATO_DOCUMENTO,
                     (CASE
                        WHEN d.ID_DOCUMENTO_INDEX IS NOT NULL 
                           THEN 'S'
                        ELSE NULL
                     END) ALLEGATO_PAGAMENTO,
                     DECODE (i.PROGR_BANDO_LINEA_INTERVENTO,
                               NULL, 'N',
                               'S') BR42,
				    d.DT_INSERIMENTO_FOLDER,
					d.DT_AGGIORNAMENTO_INDEX
               FROM
                    REGOLA42_1 i,
                    PBANDI_T_DOMANDA h,
                    PBANDI_T_PROGETTO g,
                    PBANDI_D_STATO_DOCUMENTO_SPESA f,
                    dich_spesa_1 e,
                    allegati_pag d,      --Allegati pagamenti
                    PBANDI_R_DOC_SPESA_PROGETTO c,
                    PBANDI_T_DOCUMENTO_DI_SPESA b,
                    PBANDI_R_PAGAMENTO_DOC_SPESA a
              WHERE i.PROGR_BANDO_LINEA_INTERVENTO(+) = h.PROGR_BANDO_LINEA_INTERVENTO
                AND h.ID_DOMANDA = g.ID_DOMANDA
                AND g.ID_PROGETTO = c.ID_PROGETTO
                AND e.ID_PROGETTO(+) = c.ID_PROGETTO
                AND e.ID_DOCUMENTO_DI_SPESA(+) = c.ID_DOCUMENTO_DI_SPESA
                AND d.ID_TARGET(+) = a.ID_PAGAMENTO
                AND f.ID_STATO_DOCUMENTO_SPESA = c.ID_STATO_DOCUMENTO_SPESA
                AND c.ID_DOCUMENTO_DI_SPESA = b.ID_DOCUMENTO_DI_SPESA
                AND b.ID_DOCUMENTO_DI_SPESA = a.ID_DOCUMENTO_DI_SPESA);
				
CREATE OR REPLACE FORCE VIEW PBANDI_V_PAGAM_PROG_DOC_SPESA
(
   ID_DOCUMENTO_DI_SPESA,
   ID_PROGETTO,
   ID_PAGAMENTO,
   IP,
   IQ,
   IV,
   DELTA_I,
   TOT_DELTA_I,
   IR,
   IR_NC,
   FLAG_RQ
)
AS
   WITH W_PAGAMENTO_DOC_SPESA
        AS (  SELECT a.ID_DOCUMENTO_DI_SPESA,
                     a.ID_PAGAMENTO,
                     a1.ID_PROGETTO,
                     SUM (c.IMPORTO_QUIETANZATO) IMPORTO_QUIETANZATO,
                     SUM (c.IMPORTO_VALIDATO) IMPORTO_VALIDATO
                FROM (PBANDI_R_PAGAMENTO_DOC_SPESA a
                    JOIN PBANDI_R_DOC_SPESA_PROGETTO  a1 ON a1.ID_DOCUMENTO_DI_SPESA = a.ID_DOCUMENTO_DI_SPESA)
                     LEFT JOIN PBANDI_T_QUOTA_PARTE_DOC_SPESA b
                       ON b.ID_DOCUMENTO_DI_SPESA = a.id_documento_di_spesa
                       AND b.id_progetto = a1.id_progetto
                      LEFT JOIN PBANDI_R_PAG_QUOT_PARTE_DOC_SP c
                        ON c.ID_QUOTA_PARTE_DOC_SPESA =
                              b.ID_QUOTA_PARTE_DOC_SPESA
                           AND c.ID_PAGAMENTO = a.ID_PAGAMENTO
            GROUP BY a.ID_DOCUMENTO_DI_SPESA, a.ID_PAGAMENTO, a1.ID_PROGETTO),
        W_RENDICONTATO_NOTA_CREDITO
        AS (  SELECT NOTECREDITO.ID_DOC_RIFERIMENTO,
                     DSP.ID_PROGETTO,
                     SUM (DSP.IMPORTO_RENDICONTAZIONE)
                        IMPORTO_RENDICONTAZIONE_NC
                FROM PBANDI_T_DOCUMENTO_DI_SPESA NOTECREDITO,
                     PBANDI_R_DOC_SPESA_PROGETTO DSP
               WHERE DSP.ID_DOCUMENTO_DI_SPESA =
                        NOTECREDITO.ID_DOCUMENTO_DI_SPESA
                     AND ID_DOC_RIFERIMENTO IS NOT NULL
            GROUP BY NOTECREDITO.ID_DOC_RIFERIMENTO, DSP.ID_PROGETTO)
   SELECT a.ID_DOCUMENTO_DI_SPESA,
          b.ID_PROGETTO,
          a.ID_PAGAMENTO,
          c.IMPORTO_PAGAMENTO IP,
          a.IMPORTO_QUIETANZATO IQ,
          NVL (a.IMPORTO_VALIDATO, 0) IV,
          (c.IMPORTO_PAGAMENTO - NVL(a.IMPORTO_QUIETANZATO,0)) DELTA_I,
          SUM (c.IMPORTO_PAGAMENTO - NVL(a.IMPORTO_QUIETANZATO,0))
             OVER (PARTITION BY a.ID_DOCUMENTO_DI_SPESA, b.ID_PROGETTO)
             TOT_DELTA_I,
          (b.IMPORTO_RENDICONTAZIONE - NVL (d.IMPORTO_RENDICONTAZIONE_NC, 0))
             IR,
          d.IMPORTO_RENDICONTAZIONE_NC IR_NC,
          (CASE
              WHEN (SUM (
                       c.IMPORTO_PAGAMENTO - NVL (a.IMPORTO_QUIETANZATO, 0))
                    OVER (
                       PARTITION BY a.ID_DOCUMENTO_DI_SPESA, b.ID_PROGETTO)
                    - (b.IMPORTO_RENDICONTAZIONE
                       - NVL (d.IMPORTO_RENDICONTAZIONE_NC, 0))) >= 0
              THEN
                 'S'
              ELSE
                 'N'
           END)
             FLAG_RQ
     FROM W_PAGAMENTO_DOC_SPESA a,
          PBANDI_R_DOC_SPESA_PROGETTO b,
          PBANDI_T_PAGAMENTO c,
          W_RENDICONTATO_NOTA_CREDITO d
    WHERE     a.ID_DOCUMENTO_DI_SPESA = b.ID_DOCUMENTO_DI_SPESA
          AND c.ID_PAGAMENTO = a.ID_PAGAMENTO
          AND d.ID_DOC_RIFERIMENTO(+) = b.ID_DOCUMENTO_DI_SPESA
          AND d.ID_PROGETTO(+) = B.ID_PROGETTO
          AND a.ID_PROGETTO = B.ID_PROGETTO;
		  
COMMENT ON TABLE PBANDI_V_PAGAM_PROG_DOC_SPESA IS 'Pagamenti Progetto Documenti di spesa';

COMMENT ON COLUMN PBANDI_V_PAGAM_PROG_DOC_SPESA.IP IS 'Importo pagamento';

COMMENT ON COLUMN PBANDI_V_PAGAM_PROG_DOC_SPESA.IQ IS 'Importo quietanziato';

COMMENT ON COLUMN PBANDI_V_PAGAM_PROG_DOC_SPESA.IV IS 'Importo validato';

COMMENT ON COLUMN PBANDI_V_PAGAM_PROG_DOC_SPESA.DELTA_I IS 'Delta  Importo pagamento-Importo quietanziato';

COMMENT ON COLUMN PBANDI_V_PAGAM_PROG_DOC_SPESA.TOT_DELTA_I IS 'Totale Delta  Importo pagamento-Importo quietanziato su documento/progetto';

COMMENT ON COLUMN PBANDI_V_PAGAM_PROG_DOC_SPESA.IR IS 'Importo rendicontazione compreso delle note di credito';

COMMENT ON COLUMN PBANDI_V_PAGAM_PROG_DOC_SPESA.IR_NC IS 'Importo rendicontazione solo note credito';

COMMENT ON COLUMN PBANDI_V_PAGAM_PROG_DOC_SPESA.FLAG_RQ IS '"S" se rendicontabile è coperto da quietanza altrimenti "N"';

--Nuova gestione processo
--PBANDI_D_TIPO_TASK
CREATE TABLE PBANDI_D_TIPO_TASK
(
  ID_TIPO_TASK           NUMBER(2),
  DESCR_BREVE_TIPO_TASK  VARCHAR2(3),
  DESCR_TIPO_TASK        VARCHAR2(200),
  FLAG_OPT               VARCHAR2(1),
  FLAG_PUBLIC            VARCHAR2(1)
)
TABLESPACE PBANDI_SMALL_TBL;

COMMENT ON TABLE PBANDI_D_TIPO_TASK IS 'Tipologia di task del processo
GA=Gataway AND (Il processo va avanti se tutti i task precedenti sono conclusi)
GE=Gateway chiusura (Se il task è concluso allora il processo è terminato
GO=Gateway OR (Il processo va avanti se uno dei task precedenti è concluso)
GS=Gateway di selezione (Al task viene associato un metodo che determina il task successivo nel caso di più rami di processo
TA=Task normale
TC=Task con controllo di esecuzione. Al task viene associato un metodo che viene eseguito automaticamente. (Se il task non deve essere eseguito il processo va avanti. 
TF=Task fittizio. Non corrisponde ad una attività; serve solo ad incanalare il processo
TO=Task opzionale (I task opzionali non hanno task successivi e possono rimanere disponibili fino alla fine del processo
TOC=Task opzionale con controllo (Sono sempre disponibili se superano il controllo)
';

COMMENT ON COLUMN PBANDI_D_TIPO_TASK.ID_TIPO_TASK IS 'Chiave artificiale';
COMMENT ON COLUMN PBANDI_D_TIPO_TASK.DESCR_BREVE_TIPO_TASK IS 'Codice logico della tipologia';
COMMENT ON COLUMN PBANDI_D_TIPO_TASK.DESCR_TIPO_TASK IS 'Descrizione';
COMMENT ON COLUMN PBANDI_D_TIPO_TASK.FLAG_OPT IS 'Determina se il task è opzionale (sempre disponibile per il processo)';
COMMENT ON COLUMN PBANDI_D_TIPO_TASK.FLAG_PUBLIC IS 'Determina se il task deve essere visualizzato e tracciato nella PBANDI_T_ISTANZA_STEP_PROCESSO';


ALTER TABLE PBANDI_D_TIPO_TASK ADD (
  CONSTRAINT PK_PBANDI_D_TIPO_TASK
  PRIMARY KEY
  (ID_TIPO_TASK)
  USING INDEX TABLESPACE PBANDI_SMALL_IDX,
  CONSTRAINT AK1_PBANDI_D_TIPO_TASK
  UNIQUE (DESCR_BREVE_TIPO_TASK)
  USING INDEX TABLESPACE PBANDI_SMALL_IDX);

--PBANDI_D_METODO_TASK
CREATE TABLE PBANDI_D_METODO_TASK
(
  ID_METODO_TASK           NUMBER(3),
  DESCR_BREVE_METODO_TASK  VARCHAR2(100),
  DESCR_METODO_TASK        VARCHAR2(2000),
  FLAG_CHIAMATA_END        VARCHAR2(1)
)
TABLESPACE PBANDI_SMALL_TBL;

COMMENT ON TABLE PBANDI_D_METODO_TASK IS 'Contiene i nomi delle funzioni/procedure del package PK_PROCESSO che automatizzano la logica dei task di tipo TC (Task con controllo di esecuzione)';

COMMENT ON COLUMN PBANDI_D_METODO_TASK.ID_METODO_TASK IS 'Chiave artificiale';

COMMENT ON COLUMN PBANDI_D_METODO_TASK.DESCR_BREVE_METODO_TASK IS 'Nome della funzione/procedura del package PK_PROCESSO';

COMMENT ON COLUMN PBANDI_D_METODO_TASK.DESCR_METODO_TASK IS 'Descrizione';

COMMENT ON COLUMN PBANDI_D_METODO_TASK.FLAG_CHIAMATA_END IS 'S=Metodo richiamabile dalla funzione EndAttivita';


ALTER TABLE PBANDI_D_METODO_TASK ADD (
  CONSTRAINT PK_PBANDI_D_METODO_TASK
  PRIMARY KEY
  (ID_METODO_TASK)
  USING INDEX  TABLESPACE PBANDI_SMALL_IDX,
  CONSTRAINT AK1_PBANDI_D_METODO_TASK
  UNIQUE (DESCR_BREVE_METODO_TASK)
  USING INDEX  TABLESPACE PBANDI_SMALL_IDX);

-- PBANDI_D_MULTI_TASK
CREATE TABLE PBANDI_D_MULTI_TASK
(
  ID_MULTI_TASK     NUMBER(2),
  DESCR_MULTI_TASK  VARCHAR2(100),
  QUERY_MULTI_TASK  VARCHAR2(2000)
)
TABLESPACE PBANDI_SMALL_TBL;

COMMENT ON TABLE PBANDI_D_MULTI_TASK IS 'Tabella che realizza una multi istanza del task accedendo con la query su tabelle di businness (es. Dichiarazione di spesa)';

COMMENT ON COLUMN PBANDI_D_MULTI_TASK.ID_MULTI_TASK IS 'Chiave artificiale';

COMMENT ON COLUMN PBANDI_D_MULTI_TASK.DESCR_MULTI_TASK IS 'Descrizione';

COMMENT ON COLUMN PBANDI_D_MULTI_TASK.QUERY_MULTI_TASK IS 'Query che genera la multi istanza per progetto. Contiene un placeholder per l''id del  progetto ';


ALTER TABLE PBANDI_D_MULTI_TASK ADD (
  CONSTRAINT PK_PBANDI_D_MULTI_TASK
  PRIMARY KEY
  (ID_MULTI_TASK)
  USING INDEX TABLESPACE PBANDI_SMALL_IDX);
  
--PBANDI_D_TASK
CREATE TABLE PBANDI_D_TASK
(
  ID_TASK           NUMBER(4),
  DESCR_BREVE_TASK  VARCHAR2(30),
  DESCR_TASK        VARCHAR2(2000),
  ID_TIPO_TASK      NUMBER(2),
  ID_METODO_TASK    NUMBER(3),
  ID_MULTI_TASK     NUMBER(2),
  ID_METODO_TASK_INTEGR NUMBER(3)
)
TABLESPACE PBANDI_SMALL_TBL;

COMMENT ON TABLE PBANDI_D_TASK IS 'Classe che contiene il task relativi al processo';

COMMENT ON COLUMN PBANDI_D_TASK.ID_TASK IS 'Chiave artificiale';

COMMENT ON COLUMN PBANDI_D_TASK.DESCR_BREVE_TASK IS 'Codice logico del task ';

COMMENT ON COLUMN PBANDI_D_TASK.DESCR_TASK IS 'Descrizione';

COMMENT ON COLUMN PBANDI_D_TASK.ID_TIPO_TASK IS 'Chiave esterna alla tabella PBANDI_D_TIPO_TASK';

COMMENT ON COLUMN PBANDI_D_TASK.ID_METODO_TASK IS 'Chiave esterna alla tabella PBANDI_D_METODO_TASK';

COMMENT ON COLUMN PBANDI_D_TASK.ID_MULTI_TASK IS 'Chiave esterna alla tabella PBANDI_D_MULTI_TASK';

COMMENT ON COLUMN PBANDI_D_TASK.ID_METODO_TASK_INTEGR IS 'Chiave esterna alla tabella PBANDI_D_METODO_TASK: metodo che integra la descrizione del task con informazioni specifiche';


CREATE INDEX IE1_PBANDI_D_TASK ON PBANDI_D_TASK
(ID_TIPO_TASK)
TABLESPACE PBANDI_SMALL_IDX;


CREATE INDEX IE2_PBANDI_D_TASK ON PBANDI_D_TASK
(ID_METODO_TASK)
TABLESPACE PBANDI_SMALL_IDX;

CREATE INDEX IE3_PBANDI_D_TASK ON PBANDI_D_TASK
(ID_MULTI_TASK)
TABLESPACE PBANDI_SMALL_IDX;

CREATE INDEX IE4_PBANDI_D_TASK ON PBANDI_D_TASK
(ID_METODO_TASK_INTEGR)
TABLESPACE PBANDI_SMALL_IDX;


ALTER TABLE PBANDI_D_TASK ADD (
  CONSTRAINT PK_PBANDI_D_TASK
  PRIMARY KEY
  (ID_TASK)
  USING INDEX TABLESPACE PBANDI_SMALL_IDX,
  CONSTRAINT AK1_PBANDI_D_TASK
  UNIQUE (DESCR_BREVE_TASK)
  USING INDEX TABLESPACE PBANDI_SMALL_IDX);

ALTER TABLE PBANDI_D_TASK ADD (
  CONSTRAINT FK_PBANDI_D_METODO_TASK_01 
  FOREIGN KEY (ID_METODO_TASK) 
  REFERENCES PBANDI_D_METODO_TASK (ID_METODO_TASK),
  CONSTRAINT FK_PBANDI_D_METODO_TASK_02
  FOREIGN KEY (ID_METODO_TASK_INTEGR) 
  REFERENCES PBANDI_D_METODO_TASK (ID_METODO_TASK),
  CONSTRAINT FK_PBANDI_D_TIPO_TASK_01 
  FOREIGN KEY (ID_TIPO_TASK) 
  REFERENCES PBANDI_D_TIPO_TASK (ID_TIPO_TASK),
  CONSTRAINT FK_PBANDI_D_MULTI_TASK_01
  FOREIGN KEY (ID_MULTI_TASK) 
  REFERENCES PBANDI_D_MULTI_TASK (ID_MULTI_TASK));
  
--PBANDI_T_PROCESSO  
CREATE TABLE PBANDI_T_PROCESSO
(
  ID_PROCESSO     INTEGER,
  DESCR_PROCESSO  VARCHAR2(4000)
)
TABLESPACE PBANDI_SMALL_TBL;

COMMENT ON TABLE PBANDI_T_PROCESSO IS 'Classe che contiene i processi di work flow';

COMMENT ON COLUMN PBANDI_T_PROCESSO.ID_PROCESSO IS 'Chiave artificiale';

COMMENT ON COLUMN PBANDI_T_PROCESSO.DESCR_PROCESSO IS 'Descrizione';


ALTER TABLE PBANDI_T_PROCESSO ADD (
  CONSTRAINT PK_PBANDI_T_PROCESSO
  PRIMARY KEY
  (ID_PROCESSO)
  USING INDEX TABLESPACE PBANDI_SMALL_IDX);
  


--PBANDI_T_STEP_PROCESSO
CREATE TABLE PBANDI_T_STEP_PROCESSO
(
  ID_STEP_PROCESSO  INTEGER,
  ID_TASK_PREC      NUMBER(4),
  ID_TASK           NUMBER(4),
  ID_PROCESSO       INTEGER                     NOT NULL
)
TABLESPACE PBANDI_MEDIUM_TBL;

COMMENT ON TABLE PBANDI_T_STEP_PROCESSO IS 'Classe che definiscei passi del processo con la sequenza dei task';

COMMENT ON COLUMN PBANDI_T_STEP_PROCESSO.ID_STEP_PROCESSO IS 'Chiave artificiale';

COMMENT ON COLUMN PBANDI_T_STEP_PROCESSO.ID_TASK_PREC IS 'Chiave esterna alla tabella PBANDI_T_TASK  : Riferimento al task precedente';

COMMENT ON COLUMN PBANDI_T_STEP_PROCESSO.ID_TASK IS 'Chiave esterna alla tabella PBANDI_T_TASK  : Riferimento al task corrente';

COMMENT ON COLUMN PBANDI_T_STEP_PROCESSO.ID_PROCESSO IS 'Chiave esterna alla tabella PBANDI_T_PROCESSO';



CREATE INDEX IE1_PBANDI_T_STEP_PROCES ON PBANDI_T_STEP_PROCESSO
(ID_TASK_PREC)
TABLESPACE PBANDI_MEDIUM_IDX;


CREATE INDEX IE2_PBANDI_T_STEP_PROCESSO ON PBANDI_T_STEP_PROCESSO
(ID_PROCESSO)
TABLESPACE PBANDI_MEDIUM_IDX;


ALTER TABLE PBANDI_T_STEP_PROCESSO ADD (
  CONSTRAINT PK_PBANDI_T_STEP_PROCESSO
  PRIMARY KEY
  (ID_STEP_PROCESSO)
  USING INDEX TABLESPACE PBANDI_MEDIUM_IDX,
  CONSTRAINT AK1_PBANDI_T_STEP_PROCESSO
  UNIQUE (ID_PROCESSO,ID_TASK, ID_TASK_PREC)
  USING INDEX TABLESPACE PBANDI_MEDIUM_IDX);

ALTER TABLE PBANDI_T_STEP_PROCESSO ADD (
  CONSTRAINT FK_PBANDI_D_TASK_01 
  FOREIGN KEY (ID_TASK) 
  REFERENCES PBANDI_D_TASK (ID_TASK),
  CONSTRAINT FK_PBANDI_D_TASK_02 
  FOREIGN KEY (ID_TASK_PREC) 
  REFERENCES PBANDI_D_TASK (ID_TASK),
  CONSTRAINT FK_PBANDI_T_PROCESSO_01 
  FOREIGN KEY (ID_PROCESSO) 
  REFERENCES PBANDI_T_PROCESSO (ID_PROCESSO));


--PBANDI_T_ISTANZA_STEP_PROCESSO
CREATE TABLE PBANDI_T_ISTANZA_STEP_PROCESSO
(
  ID_ISTANZA_STEP_PROCESSO  INTEGER,
  ID_PROGETTO               NUMBER(8),
  ID_STEP_PROCESSO          INTEGER,
  DT_INIZIO                 DATE,
  DT_FINE                   DATE,
  FLAG_FORZATURA            VARCHAR2(1)
)
TABLESPACE PBANDI_MEDIUM_TBL;

COMMENT ON TABLE PBANDI_T_ISTANZA_STEP_PROCESSO IS 'Classe che contiene l''istanza dello step del processo applicata al progetto';

COMMENT ON COLUMN PBANDI_T_ISTANZA_STEP_PROCESSO.ID_ISTANZA_STEP_PROCESSO IS 'Chiave artificiale';

COMMENT ON COLUMN PBANDI_T_ISTANZA_STEP_PROCESSO.ID_PROGETTO IS 'Chiave esterna della tabella PBANDI_T_PROGETTO';

COMMENT ON COLUMN PBANDI_T_ISTANZA_STEP_PROCESSO.ID_STEP_PROCESSO IS 'Chiave esterna della tabella PBANDI_T_STEP_PROCESSO';

COMMENT ON COLUMN PBANDI_T_ISTANZA_STEP_PROCESSO.DT_INIZIO IS 'Data di aperturadel task';

COMMENT ON COLUMN PBANDI_T_ISTANZA_STEP_PROCESSO.DT_FINE IS 'Data di chiusura del task';

COMMENT ON COLUMN PBANDI_T_ISTANZA_STEP_PROCESSO.FLAG_FORZATURA IS 'S - Indica che l''attività è stata forzatamente aperta per essere poi chiusa . Es . chiusura di task opzionali che non sono esplicitamente aperti';

CREATE INDEX IE1_PBANDI_T_ISTAN_STEP_PROCES ON PBANDI_T_ISTANZA_STEP_PROCESSO
(ID_STEP_PROCESSO)
TABLESPACE PBANDI_MEDIUM_IDX;




ALTER TABLE PBANDI_T_ISTANZA_STEP_PROCESSO ADD (
  CONSTRAINT PK_PBANDI_T_ISTAN_PROCES
  PRIMARY KEY
  (ID_ISTANZA_STEP_PROCESSO)
  USING INDEX TABLESPACE PBANDI_MEDIUM_IDX,
  CONSTRAINT AK1_PBANDI_T_ISTAN_STEP_PROCES
  UNIQUE (ID_PROGETTO, ID_STEP_PROCESSO)
  USING INDEX TABLESPACE PBANDI_MEDIUM_IDX);

ALTER TABLE PBANDI_T_ISTANZA_STEP_PROCESSO ADD (
  CONSTRAINT FK_PBANDI_T_PROGETTO_34 
  FOREIGN KEY (ID_PROGETTO) 
  REFERENCES PBANDI_T_PROGETTO (ID_PROGETTO),
  CONSTRAINT FK_PBANDI_T_STEP_PROCESSO_01 
  FOREIGN KEY (ID_STEP_PROCESSO) 
  REFERENCES PBANDI_T_STEP_PROCESSO (ID_STEP_PROCESSO));

CREATE SEQUENCE SEQ_PBANDI_T_ISTAN_STEP_PROCES
  START WITH 1
  MAXVALUE 9223372036854775807
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;
  
 CREATE OR REPLACE TRIGGER TG_PBANDI_T_ISTAN_STEP_PROCES
   BEFORE INSERT ON PBANDI_T_ISTANZA_STEP_PROCESSO
   REFERENCING OLD AS OLD NEW AS NEW
   FOR EACH ROW
BEGIN
  SELECT SEQ_PBANDI_T_ISTAN_STEP_PROCES.NEXTVAL INTO  :NEW.ID_ISTANZA_STEP_PROCESSO FROM DUAL;

END;
/
 
-- PBANDI_R_STEP_PROCESSO_RUOLO 
CREATE TABLE PBANDI_R_STEP_PROCESSO_RUOLO
(
  ID_STEP_PROCESSO      INTEGER,
  ID_RUOLO_DI_PROCESSO  NUMBER(5)
)
TABLESPACE PBANDI_MEDIUM_TBL;

COMMENT ON TABLE PBANDI_R_STEP_PROCESSO_RUOLO IS 'Tabella di definizione dei ruoli per gli step del processo associati alla tipologia di anagrafica che ne determinano i task da completare';

COMMENT ON COLUMN PBANDI_R_STEP_PROCESSO_RUOLO.ID_STEP_PROCESSO IS 'Chiave esterna di PBANDI_T_PROCESSO';

COMMENT ON COLUMN PBANDI_R_STEP_PROCESSO_RUOLO.ID_RUOLO_DI_PROCESSO IS 'Chiave esterna di PBANDI_C_RUOLO_DI_PROCESSO';



CREATE INDEX IE1_PBANDI_R_STEP_PROCES_RUOL ON PBANDI_R_STEP_PROCESSO_RUOLO
(ID_RUOLO_DI_PROCESSO)
TABLESPACE PBANDI_MEDIUM_IDX;


ALTER TABLE PBANDI_R_STEP_PROCESSO_RUOLO ADD (
  CONSTRAINT PK_PBANDI_R_STEP_PROCESS_RUOLO
  PRIMARY KEY
  (ID_STEP_PROCESSO, ID_RUOLO_DI_PROCESSO)
  USING INDEX TABLESPACE PBANDI_MEDIUM_IDX);

ALTER TABLE PBANDI_R_STEP_PROCESSO_RUOLO ADD (
  CONSTRAINT FK_PBANDI_RUOLO_DI_PROCESSO_01 
  FOREIGN KEY (ID_RUOLO_DI_PROCESSO) 
  REFERENCES PBANDI_C_RUOLO_DI_PROCESSO (ID_RUOLO_DI_PROCESSO),
  CONSTRAINT FK_PBANDI_T_STEP_PROCESSO_02 
  FOREIGN KEY (ID_STEP_PROCESSO) 
  REFERENCES PBANDI_T_STEP_PROCESSO (ID_STEP_PROCESSO));

-- PBANDI_T_TASK_ACTION
CREATE TABLE PBANDI_T_TASK_ACTION
(
  ID_TASK_ACTION            INTEGER,
  ID_ISTANZA_STEP_PROCESSO  INTEGER,
  ID_UTENTE                 NUMBER(8),
  DT_INIZIO                 DATE,
  DT_FINE                   DATE
)
TABLESPACE PBANDI_MEDIUM_TBL;

COMMENT ON TABLE PBANDI_T_TASK_ACTION IS 'Tabella di azioni dell''utente per l''istanza di step di processo';

COMMENT ON COLUMN PBANDI_T_TASK_ACTION.ID_TASK_ACTION IS 'Chiave artificiale';

COMMENT ON COLUMN PBANDI_T_TASK_ACTION.ID_ISTANZA_STEP_PROCESSO IS 'Chiave esterna alla tabella PBANDI_T_ISTANZA_STEP_PROCESSO';

COMMENT ON COLUMN PBANDI_T_TASK_ACTION.ID_UTENTE IS 'Chiave esterna alla tabella PBANDI_T_UTENTE';

COMMENT ON COLUMN PBANDI_T_TASK_ACTION.DT_INIZIO IS 'Data inizio';

COMMENT ON COLUMN PBANDI_T_TASK_ACTION.DT_FINE IS 'Data fine (Se non valorizzata allore l''attività è lockata)';



CREATE INDEX IE1_PBANDI_T_TASK_ACTION ON PBANDI_T_TASK_ACTION
(ID_ISTANZA_STEP_PROCESSO)
TABLESPACE PBANDI_MEDIUM_IDX;


CREATE INDEX IE2_PBANDI_T_TASK_ACTION ON PBANDI_T_TASK_ACTION
(ID_UTENTE)
TABLESPACE PBANDI_MEDIUM_IDX;


ALTER TABLE PBANDI_T_TASK_ACTION ADD (
  CONSTRAINT PK_PBANDI_T_TASK_ACTION
  PRIMARY KEY
  (ID_TASK_ACTION)
  USING INDEX TABLESPACE PBANDI_MEDIUM_IDX);

ALTER TABLE PBANDI_T_TASK_ACTION ADD (
  CONSTRAINT FK_PBANDI_T_ISTAN_STEP_PROC_01 
  FOREIGN KEY (ID_ISTANZA_STEP_PROCESSO) 
  REFERENCES PBANDI_T_ISTANZA_STEP_PROCESSO (ID_ISTANZA_STEP_PROCESSO),
  CONSTRAINT FK_PBANDI_T_UTENTE_258 
  FOREIGN KEY (ID_UTENTE) 
  REFERENCES PBANDI_T_UTENTE (ID_UTENTE));

CREATE SEQUENCE SEQ_PBANDI_T_TASK_ACTION
  START WITH 1
  MAXVALUE 9223372036854775807
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;
  
 CREATE OR REPLACE TRIGGER TG_PBANDI_T_TASK_ACTION
   BEFORE INSERT ON PBANDI_T_TASK_ACTION
   REFERENCING OLD AS OLD NEW AS NEW
   FOR EACH ROW
BEGIN
  SELECT SEQ_PBANDI_T_TASK_ACTION.NEXTVAL INTO  :NEW.ID_TASK_ACTION FROM DUAL;

END;
/

--PBANDI_D_TEMPLATE_NOTIFICA
CREATE TABLE PBANDI_D_TEMPLATE_NOTIFICA
(
  ID_TEMPLATE_NOTIFICA           INTEGER,
  DESCR_BREVE_TEMPLATE_NOTIFICA  VARCHAR2(100),
  COMP_SUBJECT                   VARCHAR2(4000),
  COMP_MESSAGE                   VARCHAR2(4000)
)
TABLESPACE PBANDI_SMALL_TBL;

COMMENT ON TABLE PBANDI_D_TEMPLATE_NOTIFICA IS 'Template notifiche di processo';

COMMENT ON COLUMN PBANDI_D_TEMPLATE_NOTIFICA.ID_TEMPLATE_NOTIFICA IS 'Chiave artificiale';

COMMENT ON COLUMN PBANDI_D_TEMPLATE_NOTIFICA.DESCR_BREVE_TEMPLATE_NOTIFICA IS 'Nome del template ';

COMMENT ON COLUMN PBANDI_D_TEMPLATE_NOTIFICA.COMP_SUBJECT IS 'OGGETTO: Testo + Placeholder (##[NOME_PARAMETRO]) per le variabili passate dall''applicativo';

COMMENT ON COLUMN PBANDI_D_TEMPLATE_NOTIFICA.COMP_MESSAGE IS 'MESSAGGIO: Testo + Placeholder (##[NOME_PARAMETRO]) per le variabili passate dall''applicativo';


ALTER TABLE PBANDI_D_TEMPLATE_NOTIFICA ADD (
  CONSTRAINT PK_PBANDI_D_TEMPLATE_NOTIFICA
  PRIMARY KEY
  (ID_TEMPLATE_NOTIFICA)
  USING INDEX TABLESPACE PBANDI_SMALL_IDX);

  --PBANDI_D_METADATA_NOTIFICA
CREATE TABLE PBANDI_D_METADATA_NOTIFICA
(
  ID_METADATA_NOTIFICA  INTEGER,
  NOME_PARAMETRO        VARCHAR2(100)
)
TABLESPACE PBANDI_SMALL_TBL;

COMMENT ON TABLE PBANDI_D_METADATA_NOTIFICA IS 'Tabella dei metadati delle notifiche di processo: Vengono preparati in una variabile globale con struttura di tipo RECORD tramite la procedura "pck_pbandi_processo.PutNotificationMetadata"';

COMMENT ON COLUMN PBANDI_D_METADATA_NOTIFICA.ID_METADATA_NOTIFICA IS 'Chiave artificiale';


COMMENT ON COLUMN PBANDI_D_METADATA_NOTIFICA.NOME_PARAMETRO IS 'Nome del parametro della procedura chiamata dall''online';


ALTER TABLE PBANDI_D_METADATA_NOTIFICA ADD (
  CONSTRAINT PK_PBANDI_D_METADATA_NOTIFICA
  PRIMARY KEY
  (ID_METADATA_NOTIFICA)
  USING INDEX TABLESPACE PBANDI_SMALL_IDX);


  --PBANDI_R_PLACEHOLDER_NOTIFICA
CREATE TABLE PBANDI_R_PLACEHOLDER_NOTIFICA
(
  ID_TEMPLATE_NOTIFICA  INTEGER,
  ID_METADATA_NOTIFICA  INTEGER,
  PLACEHOLDER  VARCHAR2(100)
)
TABLESPACE PBANDI_SMALL_TBL;

COMMENT ON TABLE PBANDI_R_PLACEHOLDER_NOTIFICA IS 'Tabella per i segnaposto da sostituire con i valori dei  parametri applicativi passati tramite procedura "pck_pbandi_processo.PutNotificationMetadata" a fronte di un template di notifica';

COMMENT ON COLUMN PBANDI_R_PLACEHOLDER_NOTIFICA.ID_TEMPLATE_NOTIFICA IS 'Chiave esterna alla tabella PBANDI_D_TEMPLATE_NOTIFICHE';

COMMENT ON COLUMN PBANDI_R_PLACEHOLDER_NOTIFICA.ID_METADATA_NOTIFICA IS 'Chiave esterna alla tabella PBANDI_D_METADATA_NOTIFICHE';

COMMENT ON COLUMN PBANDI_R_PLACEHOLDER_NOTIFICA.PLACEHOLDER IS 'Segnaposto che sostituisce il valore del parametro associato';



CREATE INDEX IE1_PBANDI_R_PLACEHOLD_NOTIFIC ON PBANDI_R_PLACEHOLDER_NOTIFICA
(ID_METADATA_NOTIFICA)
TABLESPACE PBANDI_SMALL_IDX;

ALTER TABLE PBANDI_R_PLACEHOLDER_NOTIFICA ADD (
  CONSTRAINT PBANDI_R_PLACEHOLDER_NOTIFICA
  PRIMARY KEY
  (ID_TEMPLATE_NOTIFICA,ID_METADATA_NOTIFICA)
  USING INDEX TABLESPACE PBANDI_SMALL_IDX);

ALTER TABLE PBANDI_R_PLACEHOLDER_NOTIFICA ADD (
  CONSTRAINT FK_PBANDI_D_METADATA_NOTIFICA 
  FOREIGN KEY (ID_METADATA_NOTIFICA) 
  REFERENCES PBANDI_D_METADATA_NOTIFICA (ID_METADATA_NOTIFICA),
  CONSTRAINT FK_PBANDI_D_TEMPLATE_MODIFICA 
  FOREIGN KEY (ID_METADATA_NOTIFICA) 
  REFERENCES PBANDI_D_TEMPLATE_NOTIFICA (ID_TEMPLATE_NOTIFICA));
  
-- PBANDI_T_NOTIFICA_PROCESSO 
CREATE TABLE PBANDI_T_NOTIFICA_PROCESSO
(
  ID_NOTIFICA           		INTEGER,
  ID_PROGETTO           		NUMBER(8)               NOT NULL,
  ID_RUOLO_DI_PROCESSO_DEST  	NUMBER(5)               NOT NULL,
  SUBJECT_NOTIFICA      		VARCHAR2(4000)          NOT NULL,
  MESSAGE_NOTIFICA      		VARCHAR2(4000)          NOT NULL,
  STATO_NOTIFICA        		VARCHAR2(1)             NOT NULL,
  ID_UTENTE_MITT        		NUMBER(8)               NOT NULL,
  DT_NOTIFICA           		DATE                    NOT NULL,
  ID_UTENTE_AGG                 NUMBER(8) ,
  DT_AGG_STATO_NOTIFICA         DATE               
)
TABLESPACE PBANDI_MEDIUM_TBL;

COMMENT ON TABLE PBANDI_T_NOTIFICA_PROCESSO IS 'Notifiche di processo inviate agli utenti destinatari associate al ruolo ';

COMMENT ON COLUMN PBANDI_T_NOTIFICA_PROCESSO.ID_NOTIFICA IS 'Chiave artificiale';

COMMENT ON COLUMN PBANDI_T_NOTIFICA_PROCESSO.ID_PROGETTO IS 'Chiave esterna alla tabella PBANDI_T_PROGETTO';

COMMENT ON COLUMN PBANDI_T_NOTIFICA_PROCESSO.ID_RUOLO_DI_PROCESSO_DEST IS 'Ruolo utenti destinatari. Chiave esterna alla tabella PBANDI_C_RUOLO_DI_PROCESSO';

COMMENT ON COLUMN PBANDI_T_NOTIFICA_PROCESSO.SUBJECT_NOTIFICA IS 'Subject della notifica composto con i dati inviati dall''applicativo';

COMMENT ON COLUMN PBANDI_T_NOTIFICA_PROCESSO.MESSAGE_NOTIFICA IS 'Messaggio della notifica composto con i dati inviati dall''applicativo';

COMMENT ON COLUMN PBANDI_T_NOTIFICA_PROCESSO.STATO_NOTIFICA IS 'Stato della notifica : I=Inviata,R=Letta,C=Chiusa';

COMMENT ON COLUMN PBANDI_T_NOTIFICA_PROCESSO.ID_UTENTE_MITT IS 'Utente mittente. Chiave esterna alla tabella PBANDI_T_UTENTE';

COMMENT ON COLUMN PBANDI_T_NOTIFICA_PROCESSO.DT_NOTIFICA IS 'Data della notifica';


CREATE INDEX IE1_PBANDI_T_NOTIFICA_PROCESSO ON PBANDI_T_NOTIFICA_PROCESSO
(ID_PROGETTO)
TABLESPACE PBANDI_MEDIUM_IDX;


CREATE INDEX IE2_PBANDI_T_NOTIFICA_PROCESSO ON PBANDI_T_NOTIFICA_PROCESSO
(ID_RUOLO_DI_PROCESSO_DEST)
TABLESPACE PBANDI_MEDIUM_IDX;


CREATE INDEX IE3_PBANDI_T_NOTIFICA_PROCESSO ON PBANDI_T_NOTIFICA_PROCESSO
(ID_UTENTE_MITT)
TABLESPACE PBANDI_MEDIUM_IDX;

CREATE INDEX IE4_PBANDI_T_NOTIFICA_PROCESSO ON PBANDI_T_NOTIFICA_PROCESSO
(ID_UTENTE_AGG)
TABLESPACE PBANDI_MEDIUM_IDX;

ALTER TABLE PBANDI_T_NOTIFICA_PROCESSO ADD (
  CONSTRAINT CK_PBANDI_T_NOTIF_PROCESSO_01
  CHECK (STATO_NOTIFICA IN ('C','I','R')),
  CONSTRAINT PK_PBANDI_T_NOTIFICA_PROCESSO
  PRIMARY KEY
  (ID_NOTIFICA)
  USING INDEX TABLESPACE PBANDI_MEDIUM_IDX);

ALTER TABLE PBANDI_T_NOTIFICA_PROCESSO ADD (
  CONSTRAINT FK_PBANDI_RUOLO_DI_PROCESSO_02 
  FOREIGN KEY (ID_RUOLO_DI_PROCESSO_DEST) 
  REFERENCES PBANDI_C_RUOLO_DI_PROCESSO (ID_RUOLO_DI_PROCESSO),
  CONSTRAINT FK_PBANDI_T_PROGETTO_35 
  FOREIGN KEY (ID_PROGETTO) 
  REFERENCES PBANDI_T_PROGETTO (ID_PROGETTO),
  CONSTRAINT FK_PBANDI_T_UTENTE_259 
  FOREIGN KEY (ID_UTENTE_MITT) 
  REFERENCES PBANDI_T_UTENTE (ID_UTENTE),
  CONSTRAINT FK_PBANDI_T_UTENTE_260
  FOREIGN KEY (ID_UTENTE_AGG) 
  REFERENCES PBANDI_T_UTENTE (ID_UTENTE));

CREATE SEQUENCE SEQ_PBANDI_T_NOTIFICA_PROCESSO
  START WITH 1
  MAXVALUE 9223372036854775807
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;
  
CREATE OR REPLACE TRIGGER TG_PBANDI_T_NOTIFICA_PROCESSO
   BEFORE INSERT ON PBANDI_T_NOTIFICA_PROCESSO
   REFERENCING OLD AS OLD NEW AS NEW
   FOR EACH ROW
BEGIN
  SELECT SEQ_PBANDI_T_NOTIFICA_PROCESSO.NEXTVAL INTO  :NEW.ID_NOTIFICA FROM DUAL;

END;
/

-- MODIFICA TABELLE

-- PBANDI_D_LINEA_DI_INTERVENTO
ALTER TABLE PBANDI_D_LINEA_DI_INTERVENTO
 ADD (ID_PROCESSO  INTEGER);

CREATE INDEX IE1_PBANDI_D_LINEA_DI_INTERV ON PBANDI_D_LINEA_DI_INTERVENTO
(ID_PROCESSO)
TABLESPACE PBANDI_SMALL_IDX;

ALTER TABLE PBANDI_D_LINEA_DI_INTERVENTO ADD 
CONSTRAINT FK_PBANDI_T_PROCESSO_03
 FOREIGN KEY (ID_PROCESSO)
 REFERENCES PBANDI_T_PROCESSO (ID_PROCESSO);

--PBANDI_R_BANDO_LINEA_INTERVENT
ALTER TABLE PBANDI_R_BANDO_LINEA_INTERVENT
 ADD (ID_PROCESSO  INTEGER);

CREATE INDEX IE1_PBANDI_R_BANDO_LIN_INTERV ON PBANDI_R_BANDO_LINEA_INTERVENT
(ID_PROCESSO)
TABLESPACE PBANDI_SMALL_IDX;

ALTER TABLE PBANDI_R_BANDO_LINEA_INTERVENT ADD 
CONSTRAINT FK_PBANDI_T_PROCESSO_02
 FOREIGN KEY (ID_PROCESSO)
 REFERENCES PBANDI_T_PROCESSO (ID_PROCESSO);
 
--PBANDI_T_RICHIESTA_EROGAZIONE
CREATE INDEX IE1_PBANDI_T_RICHIESTA_EROGAZ ON PBANDI_T_RICHIESTA_EROGAZIONE
(ID_PROGETTO)
TABLESPACE PBANDI_MEDIUM_IDX;

CREATE INDEX IE1_PBANDI_R_BANDO_CAUS_EROG ON PBANDI_R_BANDO_CAUSALE_EROGAZ
(ID_BANDO)
TABLESPACE PBANDI_SMALL_IDX;
 
-- Creazione VISTE
CREATE OR REPLACE  VIEW PBANDI_V_TASK_RUOLO_UTENTE
AS
   SELECT a.ID_RUOLO_DI_PROCESSO,
          a.CODICE,
          f.ID_UTENTE,
          b.ID_TIPO_SOGGETTO_CORRELATO,
          g.DESC_BREVE_TIPO_SOGG_CORRELATO,
          c.ID_TIPO_ANAGRAFICA,
          c.DESC_BREVE_TIPO_ANAGRAFICA,
          c.DESC_TIPO_ANAGRAFICA,
          e.CODICE_FISCALE_SOGGETTO,
          f.ID_SOGGETTO,
          h.id_step_processo,
          m.id_processo,
          m.descr_processo,
          i.id_task,
          l.DESCR_TASK
     FROM PBANDI_C_RUOLO_DI_PROCESSO a,
          PBANDI_R_RUOLO_TIPO_ANAGRAFICA b,
          PBANDI_D_TIPO_ANAGRAFICA c,
          PBANDI_R_SOGG_TIPO_ANAGRAFICA d,
          PBANDI_T_SOGGETTO e,
          PBANDI_T_UTENTE f,
          PBANDI_D_TIPO_SOGG_CORRELATO g,
          PBANDI_R_STEP_PROCESSO_RUOLO h,
          PBANDI_T_STEP_PROCESSO i,
          PBANDI_D_TASK l,
          PBANDI_T_PROCESSO m
    WHERE     f.id_soggetto = e.id_soggetto
          AND e.id_soggetto = d.id_soggetto
          AND d.DT_FINE_VALIDITA IS NULL
          AND d.id_tipo_anagrafica = c.id_tipo_anagrafica
          AND b.id_tipo_anagrafica = c.id_tipo_anagrafica
          AND a.id_ruolo_di_processo = b.id_ruolo_di_processo
          AND g.id_tipo_soggetto_correlato(+) = b.id_tipo_soggetto_correlato
          AND h.id_ruolo_di_processo(+) = a.id_ruolo_di_processo
          AND i.id_step_processo(+) = h.id_step_processo
          AND l.id_task(+) = i.id_task
          AND m.id_processo(+) = i.id_processo;

CREATE OR REPLACE  VIEW PBANDI_V_TASK_RUOLO
(
   ID_RUOLO_DI_PROCESSO,
   CODICE,
   ID_TIPO_ANAGRAFICA,
   DESC_BREVE_TIPO_ANAGRAFICA,
   DESC_TIPO_ANAGRAFICA,
   ID_STEP_PROCESSO,
   ID_PROCESSO,
   DESCR_PROCESSO,
   ID_TASK,
   DESCR_TASK
)
AS
   SELECT a.ID_RUOLO_DI_PROCESSO,
          a.CODICE,
          c.ID_TIPO_ANAGRAFICA,
          c.DESC_BREVE_TIPO_ANAGRAFICA,
          c.DESC_TIPO_ANAGRAFICA,
          h.id_step_processo,
          m.id_processo,
          m.descr_processo,
          i.id_task,
          l.DESCR_TASK
     FROM PBANDI_C_RUOLO_DI_PROCESSO a,
          PBANDI_R_RUOLO_TIPO_ANAGRAFICA b,
          PBANDI_D_TIPO_ANAGRAFICA c,
          PBANDI_R_STEP_PROCESSO_RUOLO h,
          PBANDI_T_STEP_PROCESSO i,
          PBANDI_D_TASK l,
          PBANDI_T_PROCESSO m
    WHERE     a.id_ruolo_di_processo = b.id_ruolo_di_processo
          AND b.id_tipo_anagrafica = c.id_tipo_anagrafica
          AND h.id_ruolo_di_processo = b.id_ruolo_di_processo
          AND i.id_step_processo = h.id_step_processo
          AND l.id_task = i.id_task
          AND m.id_processo = i.id_processo;
		  
CREATE OR REPLACE  VIEW PBANDI_V_PROCESSO_1
AS
   WITH processo
        AS (    SELECT LEVEL livello, a.*
                  FROM pbandi_t_step_processo a
            CONNECT BY PRIOR id_task = id_task_prec
			AND id_processo = 1
            START WITH id_task_prec IS NULL
			AND id_processo = 1)
   SELECT LPAD (' ', livello * 2, ' ') || b.descr_task descr_task,
          b.descr_breve_task,
          c.descr_breve_tipo_task,
          c.descr_tipo_task,
          c.flag_opt,
          c.flag_public,
          a.livello,
          a.id_step_processo,
          a.id_task_prec,
          a.id_task,
          a.id_processo
     FROM processo a, PBANDI_D_TASK b, PBANDI_D_TIPO_TASK c
    WHERE a.id_task = b.id_task AND c.id_tipo_task = b.id_tipo_task;
	
--PBANDI_V_PROCESSO_PROGETTO	
CREATE OR REPLACE VIEW PBANDI_V_PROCESSO_PROGETTO
(
   ID_PROGETTO,
   ID_PROCESSO
)
AS
   SELECT DISTINCT id_progetto, id_processo
     FROM PBANDI_T_ISTANZA_STEP_PROCESSO a, PBANDI_T_STEP_PROCESSO b
    WHERE a.id_step_processo = b.id_step_processo;

--PBANDI_V_SOGGETTO_PROGETTO
CREATE OR REPLACE VIEW PBANDI_V_SOGGETTO_PROGETTO
(
   COD_UTENTE,
   DESC_BREVE_TIPO_ANAGRAFICA,
   ID_PROGETTO,
   PROGR_BANDO_LINEA_INTERVENTO,
   NOME_BANDO_LINEA,
   CODICE_FISCALE_SOGGETTO,
   ID_SOGGETTO,
   ID_TIPO_ANAGRAFICA,
   DT_INIZIO_VALIDITA,
   DT_FINE_VALIDITA,
   PROGR_SOGGETTO_PROGETTO,
   FLAG_AGGIORNATO_FLUX,
   ID_TIPO_SOGGETTO,
   ID_UTENTE_AGG,
   ID_UTENTE_INS,
   ID_ISTANZA_PROCESSO,
   CODICE_VISUALIZZATO_PROGETTO,
   TITOLO_PROGETTO
)
AS
   SELECT    m.id_soggetto
          || '_'
          || m.codice_fiscale_soggetto
          || '@'
          || dta.desc_breve_tipo_anagrafica
             AS cod_utente,
          dta.desc_breve_tipo_anagrafica,
          m.ID_PROGETTO,
          m.PROGR_BANDO_LINEA_INTERVENTO,
          m.NOME_BANDO_LINEA,
          m.CODICE_FISCALE_SOGGETTO,
          m.ID_SOGGETTO,
          m.ID_TIPO_ANAGRAFICA,
          m.DT_INIZIO_VALIDITA,
          m.DT_FINE_VALIDITA,
          m.PROGR_SOGGETTO_PROGETTO,
          m.FLAG_AGGIORNATO_FLUX,
          m.ID_TIPO_SOGGETTO,
          m.ID_UTENTE_AGG,
          m.ID_UTENTE_INS,
          m.ID_ISTANZA_PROCESSO,
          m.CODICE_VISUALIZZATO_PROGETTO,
          m.TITOLO_PROGETTO
     FROM pbandi_d_tipo_anagrafica dta,
          (SELECT                                            
                 tp.id_progetto,
                  rbli.progr_bando_linea_intervento,
                  rbli.nome_bando_linea,
                  ts.codice_fiscale_soggetto,
                  ts.id_soggetto,
                  ts.id_tipo_anagrafica,
                  ts.dt_inizio_validita,
                  ts.dt_fine_validita,
                  NULL progr_soggetto_progetto,
                  ts.flag_aggiornato_flux,
                  ts.id_tipo_soggetto,
                  ts.id_utente_agg,
                  ts.id_utente_ins,
                  tp.id_istanza_processo,
                  tp.codice_visualizzato codice_visualizzato_progetto,
                  tp.titolo_progetto
             FROM (SELECT ts1.*,
                          tec.id_ente_competenza,
                          rsta.id_tipo_anagrafica,
                          rsta.dt_inizio_validita,
                          rsta.dt_fine_validita,
                          rsta.flag_aggiornato_flux
                     FROM pbandi_t_soggetto ts1,
                          pbandi_t_ente_competenza tec,
                          pbandi_r_sogg_tipo_anagrafica rsta
                    WHERE rsta.id_soggetto = ts1.id_soggetto
                          AND rsta.id_tipo_anagrafica NOT IN
                                 (SELECT dta.id_tipo_anagrafica
                                    FROM pbandi_d_tipo_anagrafica dta
                                   WHERE dta.desc_breve_tipo_anagrafica IN
                                            ('PERSONA-FISICA',
                                             'OI-ISTRUTTORE',
                                             'ADG-ISTRUTTORE'))
                          AND (rsta.id_tipo_anagrafica NOT IN
                                  (SELECT dta.id_tipo_anagrafica
                                     FROM pbandi_d_tipo_anagrafica dta
                                    WHERE dta.desc_breve_tipo_anagrafica IN
                                             ('BEN-MASTER',
                                              'OI-IST-MASTER',
                                              'ADG-IST-MASTER',
                                              'CREATOR'))
                               OR (NOT EXISTS
                                          (SELECT 'x'
                                             FROM pbandi_r_ente_competenza_sogg recs
                                            WHERE recs.id_soggetto =
                                                     ts1.id_soggetto
                                                  AND NVL (
                                                         TRUNC (
                                                            recs.dt_fine_validita),
                                                         TRUNC (SYSDATE + 1)) >
                                                         TRUNC (SYSDATE))
                                   OR EXISTS
                                         (SELECT 'x'
                                            FROM pbandi_r_ente_competenza_sogg recs
                                           WHERE recs.id_soggetto =
                                                    ts1.id_soggetto
                                                 AND recs.id_ente_competenza =
                                                        tec.id_ente_competenza
                                                 AND NVL (
                                                        TRUNC (
                                                           recs.dt_fine_validita),
                                                        TRUNC (SYSDATE + 1)) >
                                                        TRUNC (SYSDATE))))) ts,
                  (SELECT td.progr_bando_linea_intervento, tp.*
                     FROM pbandi_t_domanda td, pbandi_t_progetto tp
                    WHERE td.id_domanda = tp.id_domanda) tp,
                  pbandi_r_bando_linea_intervent rbli,
                  pbandi_r_bando_linea_ente_comp rble
            WHERE rbli.progr_bando_linea_intervento =
                     tp.progr_bando_linea_intervento
                  AND rble.progr_bando_linea_intervento =
                         rbli.progr_bando_linea_intervento
                  AND rble.id_ruolo_ente_competenza =
                         (SELECT dre.id_ruolo_ente_competenza
                            FROM pbandi_d_ruolo_ente_competenza dre
                           WHERE dre.desc_breve_ruolo_ente = 'DESTINATARIO')
                  AND ts.id_ente_competenza = rble.id_ente_competenza
           UNION ALL
           SELECT rsp.id_progetto id_progetto,
                  rbli.progr_bando_linea_intervento,
                  rbli.nome_bando_linea,
                  ts.codice_fiscale_soggetto,
                  ts.id_soggetto,
                  rsp.id_tipo_anagrafica,
                  rsp.dt_inizio_validita,
                  rsp.dt_fine_validita,
                  rsp.progr_soggetto_progetto,
                  rsp.flag_aggiornato_flux,
                  ts.id_tipo_soggetto,
                  ts.id_utente_agg,
                  ts.id_utente_ins,
                  tp.id_istanza_processo,
                  tp.codice_visualizzato codice_visualizzato_progetto,
                  tp.titolo_progetto
             FROM PBANDI_T_SOGGETTO ts,
                  pbandi_r_soggetto_progetto rsp,
                  pbandi_t_domanda td,
                  pbandi_r_bando_linea_intervent rbli,
                  pbandi_t_progetto tp
            WHERE ts.id_soggetto = rsp.id_soggetto
                  AND td.id_domanda = tp.id_domanda
                  AND rbli.progr_bando_linea_intervento =
                         td.progr_bando_linea_intervento
                  AND tp.id_progetto = rsp.id_progetto) m
    WHERE m.id_tipo_anagrafica = dta.id_tipo_anagrafica;

	
--PBANDI_V_PROGETTI_FLUX
CREATE OR REPLACE  VIEW PBANDI_V_PROGETTI_FLUX
(
   COD_UTENTE,
   DESC_BREVE_TIPO_ANAGRAFICA,
   ID_PROGETTO,
   PROGR_BANDO_LINEA_INTERVENTO,
   NOME_BANDO_LINEA,
   CODICE_FISCALE_SOGGETTO,
   ID_SOGGETTO,
   ID_TIPO_ANAGRAFICA,
   DT_INIZIO_VALIDITA,
   DT_FINE_VALIDITA,
   PROGR_SOGGETTO_PROGETTO,
   FLAG_AGGIORNATO_FLUX,
   ID_TIPO_SOGGETTO,
   ID_UTENTE_AGG,
   ID_UTENTE_INS,
   ID_ISTANZA_PROCESSO,
   CODICE_VISUALIZZATO_PROGETTO,
   TITOLO_PROGETTO,
   CODICE_RUOLO,
   DEFINIZIONE_PROCESSO,
   DT_AGGIORNAMENTO,
   DT_INSERIMENTO,
   ID_SOGGETTO_BENEFICIARIO,
   CODICE_FISCALE_BENEFICIARIO,
   DENOMINAZIONE_BENEFICIARIO,
   FLAG_RAPPRESENTANTE_LEGALE
)
AS
   SELECT  /*+NO_QUERY_TRANSFORMATION  */
          m.COD_UTENTE,
          m.DESC_BREVE_TIPO_ANAGRAFICA,
          m.ID_PROGETTO,
          m.PROGR_BANDO_LINEA_INTERVENTO,
          m.NOME_BANDO_LINEA,
          m.CODICE_FISCALE_SOGGETTO,
          m.ID_SOGGETTO,
          m.ID_TIPO_ANAGRAFICA,
          m.DT_INIZIO_VALIDITA,
          m.DT_FINE_VALIDITA,
          m.PROGR_SOGGETTO_PROGETTO,
          m.FLAG_AGGIORNATO_FLUX,
          m.ID_TIPO_SOGGETTO,
          m.ID_UTENTE_AGG,
          m.ID_UTENTE_INS,
          m.ID_ISTANZA_PROCESSO,
          m.CODICE_VISUALIZZATO_PROGETTO,
          m.TITOLO_PROGETTO,
          m.CODICE_RUOLO,
          m.DEFINIZIONE_PROCESSO,
          m.DT_AGGIORNAMENTO,
          m.DT_INSERIMENTO,
          ben.id_soggetto_BENEFICIARIO,
          ben.codice_fiscale_BENEFICIARIO,
          ben.DENOMINAZIONE_BENEFICIARIO,
          CASE
             WHEN ben.id_soggetto_beneficiario IN
                     (SELECT rsc.id_soggetto_ente_giuridico
                        FROM pbandi_r_sogg_prog_sogg_correl rspsc,
                             pbandi_r_soggetti_correlati rsc,
                             pbandi_d_tipo_sogg_correlato dtsc
                       WHERE rsc.progr_soggetti_correlati =
                                rspsc.progr_soggetti_correlati
                             AND rspsc.progr_soggetto_progetto =
                                    m.progr_soggetto_progetto
                             AND rsc.id_tipo_soggetto_correlato =
                                    dtsc.id_tipo_soggetto_correlato
                             AND dtsc.desc_breve_tipo_sogg_correlato =
                                    'Rappr. Leg.'
                             AND NVL (TRUNC (rsc.dt_fine_validita),
                                      TRUNC (SYSDATE + 1)) > TRUNC (SYSDATE)
                             AND NVL (TRUNC (dtsc.dt_fine_validita),
                                      TRUNC (SYSDATE + 1)) > TRUNC (SYSDATE))
                  AND m.desc_breve_tipo_anagrafica = 'PERSONA-FISICA'
             THEN
                'S'
             ELSE
                'N'
          END
             flag_rappresentante_legale
     FROM (SELECT rsp.id_soggetto id_soggetto_beneficiario,
                  benInfo.codice_fiscale_soggetto codice_fiscale_beneficiario,
                  NVL (teg.denominazione_ente_giuridico,
                       tpf.nome || NVL2 (tpf.nome, ' ', '') || tpf.cognome)
                     AS denominazione_beneficiario,
                  rsp.id_progetto
             FROM pbandi_r_soggetto_progetto rsp,
                  (SELECT pbandi_t_soggetto.id_soggetto,
                          pbandi_t_soggetto.codice_fiscale_soggetto,
                          pbandi_d_tipo_soggetto.desc_breve_tipo_soggetto
                     FROM pbandi_t_soggetto, pbandi_d_tipo_soggetto
                    WHERE NVL (
                             TRUNC (pbandi_d_tipo_soggetto.dt_fine_validita),
                             TRUNC (SYSDATE + 1)) > TRUNC (SYSDATE)
                          AND pbandi_d_tipo_soggetto.id_tipo_soggetto =
                                 pbandi_t_soggetto.id_tipo_soggetto) benInfo,
                  pbandi_t_ente_giuridico teg,
                  pbandi_t_persona_fisica tpf
            WHERE rsp.id_soggetto = benInfo.id_soggetto
                  AND rsp.ID_TIPO_ANAGRAFICA =
                         (SELECT m.id_tipo_anagrafica
                            FROM pbandi_d_tipo_anagrafica m
                           WHERE m.desc_breve_tipo_anagrafica =
                                    'BENEFICIARIO')
                  AND NVL (TRUNC (rsp.dt_fine_validita), TRUNC (SYSDATE + 1)) >
                         TRUNC (SYSDATE)
                  AND NVL (rsp.id_tipo_beneficiario, '-1') <>
                         (SELECT dtb.id_tipo_beneficiario
                            FROM pbandi_d_tipo_beneficiario dtb
                           WHERE dtb.desc_breve_tipo_beneficiario =
                                    'BEN-ASSOCIATO')
                  AND NVL (TRUNC (teg.dt_fine_validita), TRUNC (SYSDATE + 1)) >
                         TRUNC (SYSDATE)
                  AND NVL (TRUNC (tpf.dt_fine_validita), TRUNC (SYSDATE + 1)) >
                         TRUNC (SYSDATE)
                  AND rsp.ID_PERSONA_FISICA = tpf.ID_PERSONA_FISICA(+)
                  AND rsp.id_ente_giuridico = teg.id_ente_giuridico(+)) ben,
          (SELECT                                                   
                 m1.*,
                  crp.codice_ruolo,
                  cdp.uuid_processo definizione_processo,
                  NULL AS dt_aggiornamento,
                  NULL AS dt_inserimento
             FROM pbandi_v_soggetto_progetto m1,
                  (SELECT crp.codice codice_ruolo,
                          rrta.id_tipo_anagrafica,
                          crp.id_definizione_processo
                     FROM pbandi_c_ruolo_di_processo crp,
                          pbandi_r_ruolo_tipo_anagrafica rrta
                    WHERE crp.id_ruolo_di_processo =
                             rrta.id_ruolo_di_processo) crp,
                  pbandi_c_definizione_processo cdp
            WHERE cdp.id_definizione_processo = crp.id_definizione_processo
                  AND m1.id_tipo_anagrafica = crp.id_tipo_anagrafica) m
    WHERE ben.id_progetto = m.id_progetto
          AND (m.desc_breve_tipo_anagrafica <> 'PERSONA-FISICA'
               OR ben.id_soggetto_beneficiario IN
                     (SELECT rsc.id_soggetto_ente_giuridico
                        FROM pbandi_r_sogg_prog_sogg_correl rspsc,
                             pbandi_r_soggetti_correlati rsc
                       WHERE rsc.progr_soggetti_correlati =
                                rspsc.progr_soggetti_correlati
                             AND NVL (TRUNC (rsc.dt_fine_validita),
                                      TRUNC (SYSDATE + 1)) > TRUNC (SYSDATE)
                             AND rspsc.progr_soggetto_progetto =
                                    m.progr_soggetto_progetto
                             AND rsc.id_tipo_soggetto_correlato IN
                                    (SELECT rrta.id_tipo_soggetto_correlato
                                       FROM pbandi_r_ruolo_tipo_anagrafica rrta
                                      WHERE rrta.id_tipo_anagrafica =
                                               m.id_tipo_anagrafica)));
											   

--PBANDI_V_PROGETTI_BEN_BL
CREATE OR REPLACE  VIEW PBANDI_V_PROGETTI_BEN_BL
AS
   SELECT  /*+NO_QUERY_TRANSFORMATION  */
          m.ID_PROGETTO,
          m.PROGR_BANDO_LINEA_INTERVENTO,
          m.NOME_BANDO_LINEA,
          m.CODICE_FISCALE_SOGGETTO,
          m.ID_SOGGETTO,
          m.CODICE_VISUALIZZATO_PROGETTO,
          m.TITOLO_PROGETTO,
          ben.id_soggetto_BENEFICIARIO,
          ben.codice_fiscale_BENEFICIARIO,
          ben.DENOMINAZIONE_BENEFICIARIO,
          CASE
             WHEN ben.id_soggetto_beneficiario IN
                     (SELECT rsc.id_soggetto_ente_giuridico
                        FROM pbandi_r_sogg_prog_sogg_correl rspsc,
                             pbandi_r_soggetti_correlati rsc,
                             pbandi_d_tipo_sogg_correlato dtsc
                       WHERE rsc.progr_soggetti_correlati =
                                rspsc.progr_soggetti_correlati
                             AND rspsc.progr_soggetto_progetto =
                                    m.progr_soggetto_progetto
                             AND rsc.id_tipo_soggetto_correlato =
                                    dtsc.id_tipo_soggetto_correlato
                             AND dtsc.desc_breve_tipo_sogg_correlato =
                                    'Rappr. Leg.'
                             AND NVL (TRUNC (rsc.dt_fine_validita),
                                      TRUNC (SYSDATE + 1)) > TRUNC (SYSDATE)
                             AND NVL (TRUNC (dtsc.dt_fine_validita),
                                      TRUNC (SYSDATE + 1)) > TRUNC (SYSDATE))
                  AND m.desc_breve_tipo_anagrafica = 'PERSONA-FISICA'
             THEN
                'S'
             ELSE
                'N'
          END
             flag_rappresentante_legale
     FROM (SELECT rsp.id_soggetto id_soggetto_beneficiario,
                  benInfo.codice_fiscale_soggetto codice_fiscale_beneficiario,
                  NVL (teg.denominazione_ente_giuridico,
                       tpf.nome || NVL2 (tpf.nome, ' ', '') || tpf.cognome)
                     AS denominazione_beneficiario,
                  rsp.id_progetto
             FROM pbandi_r_soggetto_progetto rsp,
                  (SELECT pbandi_t_soggetto.id_soggetto,
                          pbandi_t_soggetto.codice_fiscale_soggetto,
                          pbandi_d_tipo_soggetto.desc_breve_tipo_soggetto
                     FROM pbandi_t_soggetto, pbandi_d_tipo_soggetto
                    WHERE NVL (
                             TRUNC (pbandi_d_tipo_soggetto.dt_fine_validita),
                             TRUNC (SYSDATE + 1)) > TRUNC (SYSDATE)
                          AND pbandi_d_tipo_soggetto.id_tipo_soggetto =
                                 pbandi_t_soggetto.id_tipo_soggetto) benInfo,
                  pbandi_t_ente_giuridico teg,
                  pbandi_t_persona_fisica tpf
            WHERE rsp.id_soggetto = benInfo.id_soggetto
                  AND rsp.ID_TIPO_ANAGRAFICA =
                         (SELECT m.id_tipo_anagrafica
                            FROM pbandi_d_tipo_anagrafica m
                           WHERE m.desc_breve_tipo_anagrafica =
                                    'BENEFICIARIO')
                  AND NVL (TRUNC (rsp.dt_fine_validita), TRUNC (SYSDATE + 1)) >
                         TRUNC (SYSDATE)
                  AND NVL (rsp.id_tipo_beneficiario, '-1') <>
                         (SELECT dtb.id_tipo_beneficiario
                            FROM pbandi_d_tipo_beneficiario dtb
                           WHERE dtb.desc_breve_tipo_beneficiario =
                                    'BEN-ASSOCIATO')
                  AND NVL (TRUNC (teg.dt_fine_validita), TRUNC (SYSDATE + 1)) >
                         TRUNC (SYSDATE)
                  AND NVL (TRUNC (tpf.dt_fine_validita), TRUNC (SYSDATE + 1)) >
                         TRUNC (SYSDATE)
                  AND rsp.ID_PERSONA_FISICA = tpf.ID_PERSONA_FISICA(+)
                  AND rsp.id_ente_giuridico = teg.id_ente_giuridico(+)) ben,
          (SELECT                                                   
                 m1.*,
                  crp.codice_ruolo,
                  cdp.uuid_processo definizione_processo,
                  NULL AS dt_aggiornamento,
                  NULL AS dt_inserimento
             FROM pbandi_v_soggetto_progetto m1,
                  (SELECT crp.codice codice_ruolo,
                          rrta.id_tipo_anagrafica,
                          crp.id_definizione_processo
                     FROM pbandi_c_ruolo_di_processo crp,
                          pbandi_r_ruolo_tipo_anagrafica rrta
                    WHERE crp.id_ruolo_di_processo =
                             rrta.id_ruolo_di_processo) crp,
                  pbandi_c_definizione_processo cdp
            WHERE cdp.id_definizione_processo = crp.id_definizione_processo
                  AND m1.id_tipo_anagrafica = crp.id_tipo_anagrafica) m
    WHERE ben.id_progetto = m.id_progetto
          AND (m.desc_breve_tipo_anagrafica <> 'PERSONA-FISICA'
               OR ben.id_soggetto_beneficiario IN
                     (SELECT rsc.id_soggetto_ente_giuridico
                        FROM pbandi_r_sogg_prog_sogg_correl rspsc,
                             pbandi_r_soggetti_correlati rsc
                       WHERE rsc.progr_soggetti_correlati =
                                rspsc.progr_soggetti_correlati
                             AND NVL (TRUNC (rsc.dt_fine_validita),
                                      TRUNC (SYSDATE + 1)) > TRUNC (SYSDATE)
                             AND rspsc.progr_soggetto_progetto =
                                    m.progr_soggetto_progetto
                             AND rsc.id_tipo_soggetto_correlato IN
                                    (SELECT rrta.id_tipo_soggetto_correlato
                                       FROM pbandi_r_ruolo_tipo_anagrafica rrta
                                      WHERE rrta.id_tipo_anagrafica =
                                               m.id_tipo_anagrafica)));

--PBANDI_V_PROCESSO_EROG_CAU
CREATE OR REPLACE FORCE VIEW PBANDI_V_PROCESSO_EROG_CAU
(
   IMPORTO_AGEVOLATO,
   ID_PROGETTO,
   ID_SOGGETTO,
   ID_BANDO,
   ID_CONTO_ECONOMICO,
   ID_CAUSALE_EROGAZIONE,
   DESC_BREVE_CAUSALE,
   PROGR_ORDINAMENTO,
   DESC_CAUSALE,
   PERC_EROGAZIONE,
   PERC_LIMITE,
   GIA_RICHIESTO_CAUSALE
)
AS
     SELECT SUM (ceAge.QUOTA_IMPORTO_AGEVOLATO) IMPORTO_AGEVOLATO,
            richieste."ID_PROGETTO",
            richieste."ID_SOGGETTO",
            richieste."ID_BANDO",
            richieste."ID_CONTO_ECONOMICO",
            richieste."ID_CAUSALE_EROGAZIONE",
            richieste."DESC_BREVE_CAUSALE",
            richieste."PROGR_ORDINAMENTO",
            richieste."DESC_CAUSALE",
            richieste."PERC_EROGAZIONE",
            richieste."PERC_LIMITE",
            richieste."GIA_RICHIESTO_CAUSALE"
       FROM (  SELECT proCauErog.*,
                      SUM (richErog.IMPORTO_EROGAZIONE_RICHIESTO)
                         GIA_RICHIESTO_CAUSALE
                 FROM (SELECT pro.ID_PROGETTO,
                              banCauErog.ID_BANDO,
                              ce.ID_CONTO_ECONOMICO,
                              cauErog.ID_CAUSALE_EROGAZIONE,
                              cauErog.DESC_BREVE_CAUSALE,
                              cauErog.PROGR_ORDINAMENTO,
                              cauErog.DESC_CAUSALE,
                              banCauErog.PERC_EROGAZIONE,
                              banCauErog.PERC_LIMITE,
                              ben.id_soggetto
                         FROM PBANDI_R_BANDO_CAUSALE_EROGAZ banCauErog,
                              PBANDI_D_CAUSALE_EROGAZIONE cauErog,
                              PBANDI_T_PROGETTO pro,
                              PBANDI_T_DOMANDA dom,
                              PBANDI_R_BANDO_LINEA_INTERVENT banLin,
                              PBANDI_T_CONTO_ECONOMICO ce,
                              PBANDI_D_STATO_CONTO_ECONOMICO statoCe,
                              PBANDI_D_TIPOLOGIA_CONTO_ECON tipoCe,
                              (SELECT soggPro.ID_PROGETTO,
                                      soggPro.ID_SOGGETTO,
                                      ente.ID_FORMA_GIURIDICA,
                                      ente.ID_DIMENSIONE_IMPRESA
                                 FROM PBANDI_R_SOGGETTO_PROGETTO soggPro,
                                      PBANDI_D_TIPO_BENEFICIARIO tipoBen,
                                      pbandi_t_ente_giuridico ente
                                WHERE soggPro.ID_TIPO_ANAGRAFICA = 1
                                      AND soggPro.DT_FINE_VALIDITA IS NULL
                                      AND NVL (soggPro.id_tipo_beneficiario, -1) <>
                                             4
                                      AND soggPro.ID_TIPO_BENEFICIARIO =
                                             tipoBen.ID_TIPO_BENEFICIARIO
                                      AND soggPro.ID_ENTE_GIURIDICO =
                                             ente.ID_ENTE_GIURIDICO) ben
                        WHERE banCauErog.ID_CAUSALE_EROGAZIONE =
                                 cauErog.ID_CAUSALE_EROGAZIONE
                              AND pro.ID_DOMANDA = dom.ID_DOMANDA
                              AND dom.PROGR_BANDO_LINEA_INTERVENTO =
                                     banLin.PROGR_BANDO_LINEA_INTERVENTO
                              AND banLin.ID_BANDO = banCauErog.ID_BANDO
                              AND pro.ID_PROGETTO = ben.ID_PROGETTO
                              AND (banCauErog.ID_FORMA_GIURIDICA =
                                      ben.ID_FORMA_GIURIDICA
                                   OR (banCauErog.ID_DIMENSIONE_IMPRESA =
                                          ben.ID_DIMENSIONE_IMPRESA
                                       AND banCauErog.ID_FORMA_GIURIDICA IS NULL)
                                   OR (banCauErog.ID_FORMA_GIURIDICA IS NULL
                                       AND banCauErog.ID_DIMENSIONE_IMPRESA
                                              IS NULL))
                              AND ce.ID_DOMANDA = dom.ID_DOMANDA
                              AND ce.DT_FINE_VALIDITA IS NULL
                              AND ce.ID_STATO_CONTO_ECONOMICO =
                                     statoCe.ID_STATO_CONTO_ECONOMICO
                              AND statoCe.ID_TIPOLOGIA_CONTO_ECONOMICO =
                                     tipoCe.ID_TIPOLOGIA_CONTO_ECONOMICO
                              AND tipoCe.DESC_BREVE_TIPOLOGIA_CONTO_ECO NOT IN
                                     ('COPY_IST', 'COPY_BEN')) proCauErog,
                      PBANDI_T_RICHIESTA_EROGAZIONE richErog
                WHERE richErog.ID_PROGETTO(+) = proCauErog.ID_PROGETTO
                      AND richErog.ID_CAUSALE_EROGAZIONE(+) =
                             proCauErog.ID_CAUSALE_EROGAZIONE
             GROUP BY proCauErog.ID_PROGETTO,
                      proCauErog.ID_SOGGETTO,
                      proCauErog.ID_BANDO,
                      proCauErog.ID_CAUSALE_EROGAZIONE,
                      proCauErog.PROGR_ORDINAMENTO,
                      proCauErog.DESC_BREVE_CAUSALE,
                      proCauErog.DESC_CAUSALE,
                      proCauErog.PERC_EROGAZIONE,
                      proCauErog.PERC_LIMITE,
                      proCauErog.ID_CONTO_ECONOMICO
             ORDER BY proCauErog.ID_CAUSALE_EROGAZIONE) richieste,
            PBANDI_R_CONTO_ECONOM_MOD_AGEV ceAge
      WHERE ceAge.ID_CONTO_ECONOMICO = richieste.ID_CONTO_ECONOMICO
   GROUP BY richieste.ID_PROGETTO,
            richieste.ID_SOGGETTO,
            richieste.ID_BANDO,
            richieste.ID_CAUSALE_EROGAZIONE,
            richieste.PROGR_ORDINAMENTO,
            richieste.DESC_BREVE_CAUSALE,
            richieste.DESC_CAUSALE,
            richieste.PERC_EROGAZIONE,
            richieste.PERC_LIMITE,
            richieste.ID_CONTO_ECONOMICO,
            richieste.GIA_RICHIESTO_CAUSALE;
			
-- Creazione TIPI
--LISTTASKPROG Oggetto Task per progetto
CREATE OR REPLACE TYPE OBJTASKPROG AS OBJECT
(ID_PROGETTO NUMBER(8),
 TITOLO_PROGETTO  VARCHAR2(255),
 CODICE_VISUALIZZATO  VARCHAR2(100),
 DESCR_BREVE_TASK VARCHAR2(30),
 DESCR_TASK  VARCHAR2(2000),
 PROGR_BANDO_LINEA_INTERVENTO  NUMBER(8),
 NOME_BANDO_LINEA VARCHAR2(255),
 FLAG_OPT VARCHAR2(1),
 FLAG_LOCK VARCHAR2(1),
 ACRONIMO_PROGETTO VARCHAR2(20),
 ID_BUSINESS NUMBER,
 ID_NOTIFICA NUMBER
 )
/

-- LISTTASKPROG Array di Task per progetto
CREATE OR REPLACE
TYPE LISTTASKPROG AS TABLE OF OBJTASKPROG
/

-- OBJPROG Oggetto Progetto
CREATE OR REPLACE TYPE OBJPROG AS OBJECT
(ID_PROGETTO NUMBER(8),
 TITOLO_PROGETTO  VARCHAR2(255),
 CODICE_VISUALIZZATO  VARCHAR2(100),
 ACRONIMO_PROGETTO VARCHAR2(20)
 )
/

--LISTPROG Array di progetti
CREATE OR REPLACE
TYPE LISTPROG AS TABLE OF OBJPROG
/

CREATE OR REPLACE TYPE OBJNOTIFPROG AS OBJECT
(ID_PROGETTO NUMBER(8),
 TITOLO_PROGETTO  VARCHAR2(255),
 CODICE_VISUALIZZATO  VARCHAR2(100),
 ID_NOTIFICA INTEGER,
 STATO_NOTIFICA  VARCHAR2(1),
 DT_NOTIFICA  DATE,
 SUBJECT_NOTIFICA VARCHAR2(4000),
 MESSAGE_NOTIFICA VARCHAR2(4000)
 )
/

CREATE OR REPLACE
TYPE LISTNOTIFPROG AS TABLE OF OBJNOTIFPROG
/

		  